<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜菜园子</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-24T12:44:24.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cailei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>12. Dialogs</title>
    <link href="http://yoursite.com/2016/09/24/12-Dialogs/"/>
    <id>http://yoursite.com/2016/09/24/12-Dialogs/</id>
    <published>2016-09-24T11:48:26.000Z</published>
    <updated>2016-09-24T12:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>DialogFragment</p>
<p>AlertDialog</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@NonNull</div><div class="line">@Override</div><div class="line">public Dialog onCreateDialog(Bundle savedInstanceState) &#123;</div><div class="line">    return new AlertDialog.Builder(getActivity())</div><div class="line">            .setTitle(&quot;Title&quot;)</div><div class="line">            .setPositiveButton(&quot;Ok&quot;, null)</div><div class="line">            .create();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	FragmentManager fm = getFragmentManager();</div><div class="line">    DataPickerFragment dialog = new DataPickerFragment();</div><div class="line">    dialog.show(fm, TAG_DIALOG_DATE_PICKER);</div><div class="line">`</div></pre></td></tr></table></figure>
<p>Calendar组件用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Calendar c = Calendar.getInstance();</div><div class="line">      c.setTime(date);</div><div class="line">      int year = c.get(Calendar.YEAR);</div><div class="line">      int month = c.get(Calendar.MONTH);</div><div class="line">      int day = c.get(Calendar.DAY_OF_MONTH);</div></pre></td></tr></table></figure>
<p>同Activity下 fragmentA 获取从 fragmentB 的返回值，需要设置fragmentA为target</p>
<p> <code>setTargetFragment(...)</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FragmentManager fm = getFragmentManager();</div><div class="line">   DataPickerFragment dialog = DataPickerFragment.newInstance(mCrime.getmDate());</div><div class="line">   dialog.setTargetFragment(CrimeFragment.this, REQUEST_CODE_DATE);</div><div class="line">   dialog.show(fm, TAG_DIALOG_DATE_PICKER);</div></pre></td></tr></table></figure>
 <font color="Blue"><br> 父activity接收到Activity.onActivityResult(…)方法调用后，其FragmentManager会调用对应fragment的Fragment.onActivityResult(…)方法<br> </font>

<p> <code>.setPositiveButton(&quot;Ok&quot;, new DialogInterface.OnClickListener(){ ... }</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">return new AlertDialog.Builder(getActivity())</div><div class="line">         .setView(v)</div><div class="line">         .setTitle(&quot;Title&quot;)</div><div class="line">         .setPositiveButton(&quot;Ok&quot;, new DialogInterface.OnClickListener() &#123;</div><div class="line">             @Override</div><div class="line">             public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                 int year = mDatePicker.getYear();</div><div class="line">                 int month = mDatePicker.getMonth();</div><div class="line">                 int day = mDatePicker.getDayOfMonth();</div><div class="line">                 Date date = new GregorianCalendar(year, month, day).getTime();</div><div class="line"></div><div class="line">                 getTargetFragment().onActivityResult(getTargetRequestCode(), Activity.RESULT_OK, newOutIntent(date));</div><div class="line">             &#125;</div><div class="line">         &#125;)</div><div class="line">         .create();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DialogFragment&lt;/p&gt;
&lt;p&gt;AlertDialog&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cl
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>11. Using ViewPager</title>
    <link href="http://yoursite.com/2016/09/23/11-Using-ViewPager/"/>
    <id>http://yoursite.com/2016/09/23/11-Using-ViewPager/</id>
    <published>2016-09-23T02:16:32.000Z</published>
    <updated>2016-09-23T08:32:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>人被掏空的感觉啊 ~~~</p>
<p>今天的ViewPager又是重点，而且目测这周六、日的章节也都是重点章节。不过顶过这周应该就好很多了。话说工作日基本有稳定的输出，反而周六、日比较担心，还得伺候老的小的，偶尔还约着caib们打打sc。</p>
<p>言归正传</p>
<p>如同CrimeActivity，CrimePagerActivity为了接收传入param，也需要定义类似的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Intent newIntent(Context packageContext, UUID cid) &#123;</div><div class="line">       Intent intent = new Intent(packageContext, CrimePagerActivity.class);</div><div class="line">       intent.putExtra(EXTRA_CRIME_ID, cid);</div><div class="line">       return intent;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<font color="Orange"><br>由于斟酌了intent的key的所属，为private static final，所以两个Activity都用了相同的key值<br></font>

<font color="Green"><br>关于ViewPager只需要记住如下方法即可，特别注意new FragmentStatePagerAdapter构造函数需要传入FragmentMananer实例 <code>fm</code><br></font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mViewPager.setAdapter(new FragmentStatePagerAdapter(fm) &#123;</div><div class="line">    @Override</div><div class="line">    public Fragment getItem(int position) &#123;</div><div class="line">        UUID cid = mCrimes.get(position).getmId();</div><div class="line">        return CrimeFragment.newInstance(cid);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getCount() &#123;</div><div class="line">        return mCrimes.size();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong> FragmentStatePagerAdapter </strong> : 对于不用的fragment，调用remove(Fragment)方法，用onSaveInstanceState(Bundle)来存储并恢复</p>
<p><strong> FragmentPagerAdapter </strong> : 对于不用的fragment, 调用detach(Fragment)方法，只销毁了fragment视图，fragment实例还保留在FragmentManager中。</p>
<font color="Orange"><br>可以以代码方式创建布局<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ViewPager vp = new ViewPager(this);</div><div class="line">setContentView(vp);</div></pre></td></tr></table></figure><br><br>但是google并不推荐，所以不要怕麻烦，写个xml布局文件<br></font>

<font color="Red"><br>再次说明了命名相当重要<br><br># 1. Java文件命名<br>SingleFragmentActivity<br><br>- CrimeListActivity<br><br>    CrimeListFragment<br><br>- CrimeActivity<br><br>    CrimeFragment<br><br>- CrimePagerActivity<br><br>    CrimeFragment<br><br><br># 2. Layout文件命名<br><strong>activity_fragment</strong> 对应 <code>SingleFragmentActivity</code><br><br>由于 <code>CrimeListActivity</code> 继承自 <code>SingleFragmentActivity</code>，所以没有对应的layout.xml<br><br><strong>fragment_crime_list</strong> 对应 <code>CrimeListFragment</code><br><br><strong>activity_crime_pager</strong> 对应 <code>CrimePagerActivity</code><br><br>由于 <code>CrimeActivity</code> 继承自 <code>SingleFragmentActivity</code>，所以没有对应的layout.xml<br><br><strong>fragment_crime</strong> 对应 <code>CrimeFragment</code><br><br><strong>list_item_crime.xml</strong> 对应tableview中的一个cell<br><br># 3. @id命名<br><strong>activity_fragment</strong>里：<font color="Green">@+id/fragment_container</font>

<p><strong>fragment_crime_list</strong>里：<font color="Green">@+id/crime_recycler_view</font></p>
<p><strong>activity_crime_pager</strong>里：<font color="Green">@+id/activity_crime_pager_view_pager</font></p>
<p><strong>fragment_crime</strong>里：<font color="Green">@+id/crime_title 和 @+id/crime_date 和 @+id/crime_solved</font></p>
<p><strong>list_item_crime.xml</strong>里：<font color="Green">@+id/list_item_crime_solved_check_box 和 @+id/list_item_crime_title_text_view 和 @+id/list_item_crime_date_text_view</font></p>
<h1 id="4-intent传入参数key值"><a href="#4-intent传入参数key值" class="headerlink" title="4. intent传入参数key值"></a>4. intent传入参数key值</h1><p>在 <code>CrimeActivity</code> 里：(EXTRA_IN_XXXXX)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXTRA_IN_CRIME_ID = &quot;extra.in.crime.id&quot;;</div></pre></td></tr></table></figure>
<h1 id="5-activity传入参数用的newIntent-…-静态方法"><a href="#5-activity传入参数用的newIntent-…-静态方法" class="headerlink" title="5. activity传入参数用的newIntent(…)静态方法"></a>5. activity传入参数用的newIntent(…)静态方法</h1><p>在 <code>CrimeActivity</code> 里：(newInIntent(…))</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Intent newInIntent(Context packageContext, UUID crimeId) &#123;</div><div class="line">    Intent intent = new Intent(packageContext, CrimeActivity.class);</div><div class="line">    intent.putExtra(EXTRA_IN_CRIME_ID, crimeId);</div><div class="line">    return intent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="6-bundle传入参数key值"><a href="#6-bundle传入参数key值" class="headerlink" title="6. bundle传入参数key值"></a>6. bundle传入参数key值</h1><p>在 <code>CrimeFragment</code> 里：(BUNDLE_IN_XXXXX)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BUNDLE_IN_CRIME_ID = &quot;bundle.in.crime.id&quot;;</div></pre></td></tr></table></figure>
<h1 id="6-fragment传入参数用的newInstance-…-静态方法"><a href="#6-fragment传入参数用的newInstance-…-静态方法" class="headerlink" title="6. fragment传入参数用的newInstance(…)静态方法"></a>6. fragment传入参数用的newInstance(…)静态方法</h1><p>在 <code>CrimeFragment</code> 里：(newInstance(…))</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static CrimeFragment newInstance(UUID crimeId) &#123;</div><div class="line">    Bundle args = new Bundle();</div><div class="line">    args.putSerializable(BUNDLE_IN_CRIME_ID, crimeId);</div><div class="line"></div><div class="line">    CrimeFragment fragment = new CrimeFragment();</div><div class="line">    fragment.setArguments(args);</div><div class="line">    return fragment;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后在 <code>CrimeFragment</code> 里获取</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UUID cid = (UUID)getArguments().getSerializable(BUNDLE_IN_CRIME_ID);</div></pre></td></tr></table></figure>
<h1 id="7-activity-调用方-接收返回值时用的-int-requestCode"><a href="#7-activity-调用方-接收返回值时用的-int-requestCode" class="headerlink" title="7. activity 调用方 接收返回值时用的 int requestCode"></a>7. activity 调用方 接收返回值时用的 int requestCode</h1><p>在 <code>CrimeListFragment</code> 里：(REQUEST_CODE_XXXXX)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static final int REQUEST_CODE_CRIME_TITLE = 0;</div></pre></td></tr></table></figure>
<p>在接收方 <code>CrimeListFragment</code> 里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">       super.onActivityResult(requestCode, resultCode, data);</div><div class="line">       if (resultCode == Activity.RESULT_CANCELED) &#123;</div><div class="line">           return;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       if (requestCode == REQUEST_CODE_CRIME_TITLE) &#123;</div><div class="line">           String s = CrimeActivity.crimeTitleFromOutIntent(data);</div><div class="line">           Log.e(&quot;CrimeListFragment&quot;, s);</div><div class="line">       &#125;</div><div class="line">       mAdapter.notifyDataSetChanged();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h1 id="8-activity-被调用方-返回值intent里的参数的key"><a href="#8-activity-被调用方-返回值intent里的参数的key" class="headerlink" title="8. activity 被调用方 返回值intent里的参数的key"></a>8. activity 被调用方 返回值intent里的参数的key</h1><p>在 <code>CrimeActivity</code> 里：(EXTRA_OUT_XXXXX)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static final String EXTRA_OUT_CRIME_TITLE = &quot;extra.out.crime.title&quot;;</div></pre></td></tr></table></figure>
<h1 id="9-activity-被调用方-生成返回值的newIntent-…-静态方法"><a href="#9-activity-被调用方-生成返回值的newIntent-…-静态方法" class="headerlink" title="9. activity 被调用方 生成返回值的newIntent(…)静态方法"></a>9. activity 被调用方 生成返回值的newIntent(…)静态方法</h1><p>在 <code>CrimeActivity</code> 里：(newOutIntent(…))</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Intent newOutIntent(String s) &#123;</div><div class="line">    Intent intent = new Intent();</div><div class="line">    intent.putExtra(EXTRA_OUT_CRIME_TITLE, s);</div><div class="line">    return intent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="9-activity-被调用方-帮助解析返回Intent-…-静态方法"><a href="#9-activity-被调用方-帮助解析返回Intent-…-静态方法" class="headerlink" title="9. activity 被调用方 帮助解析返回Intent(…)静态方法"></a>9. activity 被调用方 帮助解析返回Intent(…)静态方法</h1><p>在 <code>CrimeActivity</code> 里：(xxxxxFromOutIntent(…))</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static String crimeTitleFromOutIntent(Intent intent) &#123;</div><div class="line">       return intent.getStringExtra(EXTRA_OUT_XXXXX);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p></p></font><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人被掏空的感觉啊 ~~~&lt;/p&gt;
&lt;p&gt;今天的ViewPager又是重点，而且目测这周六、日的章节也都是重点章节。不过顶过这周应该就好很多了。话说工作日基本有稳定的输出，反而周六、日比较担心，还得伺候老的小的，偶尔还约着caib们打打sc。&lt;/p&gt;
&lt;p&gt;言归正传&lt;/p&gt;

    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>10. Using Fragment Arguments</title>
    <link href="http://yoursite.com/2016/09/22/10-Using-Fragment-Arguments/"/>
    <id>http://yoursite.com/2016/09/22/10-Using-Fragment-Arguments/</id>
    <published>2016-09-22T06:37:50.000Z</published>
    <updated>2016-09-23T02:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>由 CrimeListFragment 加载 CrimeActivity，并接受return值</p>
<h1 id="在CrimeListFragment里"><a href="#在CrimeListFragment里" class="headerlink" title="在CrimeListFragment里"></a>在CrimeListFragment里</h1><h2 id="处理return相关"><a href="#处理return相关" class="headerlink" title="处理return相关"></a>处理return相关</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static final int REQUEST_CRIME_ACTIVITY_CODE = 0;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">       super.onActivityResult(requestCode, resultCode, data);</div><div class="line">       if (resultCode == Activity.RESULT_CANCELED) &#123;</div><div class="line">           return;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       if (requestCode == REQUEST_CRIME_ACTIVITY_CODE) &#123;</div><div class="line">           String s = CrimeActivity.returnString(data);</div><div class="line">           Log.e(&quot;CrimeListFragment&quot;, s);</div><div class="line">       &#125;</div><div class="line">       mAdapter.notifyDataSetChanged();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivityForResult(intent, REQUEST_CRIME_ACTIVITY_CODE);</div></pre></td></tr></table></figure>
<h2 id="intent参数"><a href="#intent参数" class="headerlink" title="intent参数"></a>intent参数</h2><p>从CrimeActivity来构建Intent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Intent intent = CrimeActivity.newIntent(getActivity(), data.getmId());</div></pre></td></tr></table></figure>
<h1 id="在CrimeActivity里"><a href="#在CrimeActivity里" class="headerlink" title="在CrimeActivity里"></a>在CrimeActivity里</h1><h2 id="帮助处理返回"><a href="#帮助处理返回" class="headerlink" title="帮助处理返回"></a>帮助处理返回</h2><p>在CrimeListFragment.onActivityResult或许result用到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static String returnString(Intent intent) &#123;</div><div class="line">       return intent.getStringExtra(RETURN_STRING);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="帮助构建Intent参数"><a href="#帮助构建Intent参数" class="headerlink" title="帮助构建Intent参数"></a>帮助构建Intent参数</h2><p>在CrimeListFragment需要 <code>startActivityForResult(intent, REQUEST_CRIME_ACTIVITY_CODE);</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Intent newIntent(Context packageContext, UUID cid) &#123;</div><div class="line">    Intent intent = new Intent(packageContext, CrimeActivity.class);</div><div class="line">    intent.putExtra(EXTRA_CRIME_ID, cid);</div><div class="line">    return intent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="CrimeFragment托管于CrimeActivity"><a href="#CrimeFragment托管于CrimeActivity" class="headerlink" title="CrimeFragment托管于CrimeActivity"></a>CrimeFragment托管于CrimeActivity</h1><h2 id="在CrimeActivity里-1"><a href="#在CrimeActivity里-1" class="headerlink" title="在CrimeActivity里"></a>在CrimeActivity里</h2><font color="Green"><br>要附加argument bundle给fragment，需要调用Fragment.setArguments(Bundle)方法。必须在fragment创建后、添加给activity前完成。<br><br>惯用newInstance(…)静态构造。如此之常用以至于接下来的CrimeFragment里有代码片段，在输入newInstance后直接补Bundle的构建和arguments的设置<br></font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected Fragment createFragment() &#123;</div><div class="line">       UUID crimeId = (UUID) getIntent()</div><div class="line">               .getSerializableExtra(EXTRA_CRIME_ID);</div><div class="line">       return CrimeFragment.newInstance(crimeId);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="在CrimeFragment里"><a href="#在CrimeFragment里" class="headerlink" title="在CrimeFragment里"></a>在CrimeFragment里</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static CrimeFragment newInstance(UUID crimeId) &#123;</div><div class="line">    Bundle args = new Bundle();</div><div class="line">    args.putSerializable(ARG_CRIME_ID, crimeId);</div><div class="line"></div><div class="line">    CrimeFragment fragment = new CrimeFragment();</div><div class="line">    fragment.setArguments(args);</div><div class="line">    return fragment;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传入fragment的args在 <code>onCreate()</code> 中获取， <code>UUID crimeId = (UUID) getArguments().getSerializable(ARG_CRIME_ID);</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    UUID crimeId = (UUID) getArguments().getSerializable(ARG_CRIME_ID);</div><div class="line">    mCrime = CrimeLab.get(getActivity()).getCrime(crimeId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在CrimeFragment里返回"><a href="#在CrimeFragment里返回" class="headerlink" title="在CrimeFragment里返回"></a>在CrimeFragment里返回</h2><p>fragment无setResult，所以只能用getActivity()来设置返回值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getActivity().setResult(Activity.RESULT_OK ,CrimeActivity.newReturnIntent(mCrime.getmTitle()));</div></pre></td></tr></table></figure>
<font color="Orange"><br>setResult(…)不能放在onPause()里，否则不起作用。<br><br>估计是生命期里onPause()以后getActivity()获取不到了吧？？？不确认<br></font>

<h1 id="开始吐槽"><a href="#开始吐槽" class="headerlink" title="开始吐槽"></a>开始吐槽</h1><p>这，来来回回的，相当的绕，ActivityA托管FragmentA，然后又要从FragmentA跳转到ActivityB，然后ActivityB又托管着FragmentB，所以ActivityB需要把从FragmentA传过来的参数，在FragmentB初始化时传入，当FragmentB完活儿后，还要有返回值给FragmentA，并且由于Fragment没有setResult()，所以只能调用ActivityB来设置返回值</p>
<p>然后由于这里return里intent的key理论上应该在Activity而不是Fragment中，所以还在ActivityB里多加了个 <code>public static Intent newReturnIntent(String s)</code></p>
<p>原因、结果代码都如下：</p>
<p>CrimeActivity里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private static final String RETURN_STRING = &quot;return string&quot;;</div><div class="line"></div><div class="line">public static String returnString(Intent intent) &#123;</div><div class="line">    return intent.getStringExtra(RETURN_STRING);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static Intent newReturnIntent(String s) &#123;</div><div class="line">    Intent intent = new Intent();</div><div class="line">    intent.putExtra(RETURN_STRING, s);</div><div class="line">    return intent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由 CrimeListFragment 加载 CrimeActivity，并接受return值&lt;/p&gt;
&lt;h1 id=&quot;在CrimeListFragment里&quot;&gt;&lt;a href=&quot;#在CrimeListFragment里&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>09. Displaying Lists with RecyclerView</title>
    <link href="http://yoursite.com/2016/09/21/09-Displaying-Lists-with-RecyclerView/"/>
    <id>http://yoursite.com/2016/09/21/09-Displaying-Lists-with-RecyclerView/</id>
    <published>2016-09-21T10:49:56.000Z</published>
    <updated>2016-09-22T05:44:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>先感慨下，再笔记。<br>2016.09.21早上7：00不到起床，直奔环保新房，原本想投资一个车位，经过一早上的勘查，基于以下原因，这一期的车位暂时不投资购买了。</p>
<ol>
<li>可预见的近几年内很难有机会过去住</li>
<li>宁可买个外地牌，也不太可能买新能源，也就不存在安装充电桩的问题</li>
<li>开盘的产权车位仅仅不到1/5，而且我家楼下居然没有，还要在地下走个小5分钟才能上楼</li>
<li>销售态度极其恶劣</li>
</ol>
<p>好吧这Blog主要记录android，上面只是留个备案，如果5年内，车位价格大涨，再次证明我眼光之差的话。我觉得我在退休前，依然还能有2到3次机会做出重大投资决定，到时候要坚定地吸取教训。</p>
<p>下午本不想去公司了，可是想想确实手头还有事情。帮新人review code，花费的时间远比我自己想的多。还要自己动脑想下大致的实现。结果一下午就过去了。</p>
<p>晚上真TM累，但是约定好的一章android还没有看！！！而且这章东西还挺多，如果说ios 60%以上都在和tableview打交道，那么recyclerview应该就是android里的tableview了。</p>
<p>所以，在放松的打了1小时3局SC后（这个纯属精神上需要放松、快感），依然开始看书，然后自己开始敲code，的确概念还是比较多的，看完书敲code远没有前几章来的行云流水，是不是忘记了还要再书里再查找。<font color="Red"><strong>不过这样强迫自己多记住一点的方法，我感觉进步是最快的</strong></font></p>
<p>然后android很不给力的有2个小坑，害我躺倒床上了，又起来两、三次验证自己的想法。最终搞定，满意睡去… …</p>
<h1 id="下面开始正文："><a href="#下面开始正文：" class="headerlink" title="下面开始正文："></a>下面开始正文：</h1><p>activity 托管 fragment 代码大同小异，放到abstract class中了。(实际就是给fragment_container找对fragment)</p>
<p>fragment里包含RecyclerView</p>
<font color="Orange"><br>android studio中输入是模糊匹配，所以要输入<code>android.support.v7.widget.RecyclerView</code>可以输入&lt; a v7 re，然后tab键，或enter键，或者上下再选一下就好了<br></font>

<font color="Green"><br>android.support.v7.widget.RecyclerView<br><br>RelativeLayout<br><br>android:layout_alignXXXXX    (ParentRight)<br><br>android:layout_toXXXXXof    (Left)<br><br>android:layout_XXXXX        (below)<br></font>

<p>对于每个cell，<code>list_item_crime.xml</code></p>
<p>对于fragment，<code>fragment_crime_list.xml</code></p>
<p>对于activity，继承自 <code>SingleFragmentActivity</code></p>
<h1 id="fragment"><a href="#fragment" class="headerlink" title="fragment"></a>fragment</h1><h2 id="为RecyclerView设置LayoutManager，布局用"><a href="#为RecyclerView设置LayoutManager，布局用" class="headerlink" title="为RecyclerView设置LayoutManager，布局用"></a>为RecyclerView设置LayoutManager，布局用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Nullable</div><div class="line">@Override</div><div class="line">public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">    View view = inflater.inflate(R.layout.fragment_crime_list, container, false);</div><div class="line">    mRecyclerView = (RecyclerView)view.findViewById(R.id.crime_recycler_view);</div><div class="line">    mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));</div><div class="line"></div><div class="line">    return view;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<font color="Green"><br>LinearLayoutManager 继承自-&gt; LayoutManager<br><br>GridLayoutManager 继承自-&gt; LayoutManager<br></font>

<h2 id="生成Adapter，并将其set给RecyclerView"><a href="#生成Adapter，并将其set给RecyclerView" class="headerlink" title="生成Adapter，并将其set给RecyclerView"></a>生成Adapter，并将其set给RecyclerView</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CrimeLab crimeLab = CrimeLab.get(getActivity());</div><div class="line">List&lt;Crime&gt; crimes = crimeLab.getCrimes();</div><div class="line"></div><div class="line">mAdapter = new CrimeAdapter(crimes);</div><div class="line">mCrimeRecyclerView.setAdapter(mAdapter);</div></pre></td></tr></table></figure>
<h1 id="ViewHolder"><a href="#ViewHolder" class="headerlink" title="ViewHolder"></a>ViewHolder</h1><h2 id="找到相应的UI-View，并bind数据和视图"><a href="#找到相应的UI-View，并bind数据和视图" class="headerlink" title="找到相应的UI View，并bind数据和视图"></a>找到相应的UI View，并bind数据和视图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public void bindData(Crime crime) &#123;</div><div class="line">          mCrime = crime;</div><div class="line">          mTitleTextView.setText(mCrime.getTitle());</div><div class="line">          mDateTextView.setText(mCrime.getDate().toString());</div><div class="line">          mSolvedCheckBox.setChecked(mCrime.isSolved());</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h1 id="Adaptor"><a href="#Adaptor" class="headerlink" title="Adaptor"></a>Adaptor</h1><h2 id="实现各个代理接口"><a href="#实现各个代理接口" class="headerlink" title="实现各个代理接口"></a>实现各个代理接口</h2><p>Adaptor的声明：<code>private class CrimeAdapter extends RecyclerView.Adapter&lt;CrimeHolder&gt;</code></p>
<p><code>public CrimeHolder onCreateViewHolder(ViewGroup parent, int viewType)</code> 取出cell对应的ViewHolder, ViewHolder负责cell的重用</p>
<p><code>public void onBindViewHolder(CrimeHolder holder, int position)</code> 对新的 or 重用的cell做数据绑定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">      public CrimeHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line">          LayoutInflater layoutInflater = LayoutInflater.from(getActivity());</div><div class="line">          View view = layoutInflater.inflate(R.layout.list_item_crime, parent, false);</div><div class="line">          return new CrimeHolder(view);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      @Override</div><div class="line">      public void onBindViewHolder(CrimeHolder holder, int position) &#123;</div><div class="line">          Crime crime = mCrimes.get(position);</div><div class="line">          holder.bindCrime(crime);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      @Override</div><div class="line">      public int getItemCount() &#123;</div><div class="line">          return mCrimes.size();</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h1 id="开始坑爹"><a href="#开始坑爹" class="headerlink" title="开始坑爹"></a>开始坑爹</h1><h2 id="cell的高度"><a href="#cell的高度" class="headerlink" title="cell的高度"></a>cell的高度</h2><p>自己猛敲了一通代码后，编译一次通过，觉得应该问题不大。运行后看到若干全屏的cell。看来</p>
<ol>
<li>模块整体没啥问题</li>
<li>遗漏的某些细节</li>
</ol>
<p>尝试解决如下：</p>
<ol>
<li>再次看书，回想每个细节 （貌似细节都注意了，也没有什么不对的啊）</li>
<li>仔细对比书上code和自己code中可能影响cell高度的代码，尤其是wrap_content, match_parent这种 （也没看出所以然）</li>
<li>躺着闭眼思考，貌似我这每个cell占了全屏啊？再看看代码 <code>list_item_crime.xml</code> 里 RelativeLayout宽高果然是match_parent，改成wrap_content，✌️，搞定。但我明明跟着随书code仔细的对过了啊，虽然文件、类、布局命名不同，但是这些细节我应该不至于漏掉。</li>
<li>再看随书代码，里面 <code>list_item_crime.xml</code> 里 RelativeLayout宽高局然也是match_parent！！！这，为啥，为啥，为啥。只能继续躺下思考，再过一遍流程。</li>
</ol>
<font color="Red"><br><strong>结论</strong><br><br>随书例子用的RecyclerView： <code>com.android.support:recyclerview-v7:22.1.0</code><br><br>而我用的：<code>com.android.support:recyclerview-v7:24.2.1</code><br><br></font>

<p>替换后果然正常了，当然最最正确的，复合逻辑的，还是应该把item_cell根布局设置为wrap_content</p>
<h2 id="多种不同类型的cell"><a href="#多种不同类型的cell" class="headerlink" title="多种不同类型的cell"></a>多种不同类型的cell</h2><p><code>public CrimeHolder onCreateViewHolder(ViewGroup parent, int viewType)</code> 中，第二个参数 <code>viewType</code> 引发了我的无限猜想。</p>
<p>感觉上应该是为了支持不同cell样式而用的。躺下思考，又脑补了一遍流程。能确定的：</p>
<ul>
<li>应该对不同的cell类型有不同的ViewHolder，所以应该有类似如下代码才对：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">switch (viewType) &#123;</div><div class="line">	case TypeA:</div><div class="line">		return new ViewHolderA(inflate出来A类型cell的view);</div><div class="line">		break;</div><div class="line">	case TypeB:</div><div class="line">		return new ViewHolderB(inflate出来B类型cell的view);</div><div class="line">		break;</div><div class="line">	... ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>但是list中每个item都可能有不同的类型Type，怎么区别那个item用哪个类型呢？</li>
</ul>
<p>想了半天觉得一定缺少什么东西，把item和类型信息告诉给adaptor，于是又起来上网search，哇哈，原来Adaptor还有个接口 <code>@Override public int getItemViewType(int position)</code> 针对item的position给出相应的type。</p>
<p>但是又有个问题想不通了，虽然 <code>onCreateViewHolder</code> 确实对每个 type (也就是list中每个item所需的type) 返回了不同的 ViewHolder。</p>
<p>但 <code>@Override public void onBindViewHolder(CrimeHolder holder, int position)</code> 还要根据不同的position，获得不同的type，然后决定第一个参数传入的是哪种 ViewHolder 再调用相应的方法？</p>
<p>所以，此处第一个参数不应该是特定的ViewHolder (此处为CrimeHolder) 而最好是ViewHolder的一个子类，但却是所有支持type的ViewHolder的父类，有一个需要继承的方法叫 <code>bindData(Object data)</code></p>
<p>目前能想到的也就是这样解决了。 </p>
<p>又想到一点： <strong>position 相当于 indexpath.row ，type相当于deque用到的identifier </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先感慨下，再笔记。&lt;br&gt;2016.09.21早上7：00不到起床，直奔环保新房，原本想投资一个车位，经过一早上的勘查，基于以下原因，这一期的车位暂时不投资购买了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可预见的近几年内很难有机会过去住&lt;/li&gt;
&lt;li&gt;宁可买个外地牌，也不太可能买新
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>08. Creating User Interfaces with Layouts and Widgets</title>
    <link href="http://yoursite.com/2016/09/20/08-Creating-User-Interfaces-with-Layouts-and-Widgets/"/>
    <id>http://yoursite.com/2016/09/20/08-Creating-User-Interfaces-with-Layouts-and-Widgets/</id>
    <published>2016-09-20T05:06:48.000Z</published>
    <updated>2016-09-20T06:00:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/AndroidProgramming/0801.png" alt=""></p>
<font color="Green"><br>CheckBox<br></font>

<h1 id="样式-style-amp-主题-theme"><a href="#样式-style-amp-主题-theme" class="headerlink" title="样式(style) &amp; 主题(theme)"></a>样式(style) &amp; 主题(theme)</h1><p>AndroidManifest.xml里设置Theme：</p>
<pre><code>android:theme=&quot;@style/AppTheme&quot;
</code></pre><p>values/styles.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</div><div class="line">       &lt;!-- Customize your theme here. --&gt;</div><div class="line">       &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</div><div class="line">       &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</div><div class="line">       &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</div><div class="line">   &lt;/style&gt;</div></pre></td></tr></table></figure>
<font color="Green"><br>CheckBox.setOnCheckedChangeListener(…)<br><br>- <strong>dp</strong> : 像素无关<br>- <strong>sp</strong> : 用于字体<br><br>以 <code>layout_</code> 开头的属性，都是和父组件相关的属性，它们会告诉父布局如何在内部安排自己的子元素。其余的都是和自身相关的属性。<br><br>- <strong>padding</strong> : 内边距<br>- <strong>margin</strong> : 外边距（所以为layout_xxxxxMargin）<br></font>

<p>Create Landscape Variation 创建了 <code>/main/res/layout-land</code> 路径及在其中的布局xml文件</p>
<font color="Green"><br>android:layout_weight<br></font>

<h1 id="layout-width与layout-weight配合"><a href="#layout-width与layout-weight配合" class="headerlink" title="layout_width与layout_weight配合"></a>layout_width与layout_weight配合</h1><ul>
<li>第一步先满足width</li>
</ul>
<p><img src="/images/AndroidProgramming/0802a.png" alt=""></p>
<ul>
<li>然后按照weight的比例分配extra space</li>
</ul>
<p>1:1</p>
<p><img src="/images/AndroidProgramming/0802b.png" alt=""></p>
<p>2:1</p>
<p><img src="/images/AndroidProgramming/0802c.png" alt=""></p>
<ul>
<li>如果需要总空间等分，则应让两个控件都 <code>layout_width=0</code></li>
</ul>
<p><img src="/images/AndroidProgramming/0802d.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/AndroidProgramming/0801.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;font color=&quot;Green&quot;&gt;&lt;br&gt;CheckBox&lt;br&gt;&lt;/font&gt;

&lt;h1 id=&quot;样式-style-amp-主题-theme&quot;&gt;&lt;a
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>07. UI Fragments and the Fragment Manager</title>
    <link href="http://yoursite.com/2016/09/19/07-UI-Fragments-and-the-Fragment-Manager/"/>
    <id>http://yoursite.com/2016/09/19/07-UI-Fragments-and-the-Fragment-Manager/</id>
    <published>2016-09-19T03:28:44.000Z</published>
    <updated>2016-09-19T06:45:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>fragment的生命周期方法是由托管activity调用的，而activity的生命周期方法由操作系统调用。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><font color="Green">Fragment</font></td>
<td>android.support.v4.app.Fragment</td>
</tr>
<tr>
<td><font color="Green">FragmentActivity</font></td>
<td>android.support.v4.app.Fragment.Activity</td>
</tr>
</tbody>
</table>
<p>File -&gt; Project Structure -&gt; app -&gt; Dependencies -&gt; Library Dependency</p>
<p>com.google.android:support-v4:r7</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CrimeActivity extends FragmentActivity</div></pre></td></tr></table></figure>
<font color="Green"><br>EditText<br><br>android:hint<br></font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                         Bundle savedInstanceState) &#123;</div><div class="line">    // Inflate the layout for this fragment</div><div class="line">    return inflater.inflate(R.layout.fragment_crime, container, false);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                         Bundle savedInstanceState) &#123;</div><div class="line">    // Inflate the layout for this fragment</div><div class="line">    View v = inflater.inflate(R.layout.fragment_crime, container, false);</div><div class="line">    mCrimeTitleEditText = (EditText)v.findViewById(R.id.et_crime_title);</div><div class="line">    mCrimeTitleEditText.addTextChangedListener(new TextWatcher() &#123;</div><div class="line">        @Override</div><div class="line">        public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</div><div class="line">            mCrime.setmTitle(s.toString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void afterTextChanged(Editable s) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    return v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：</p>
<p>Fragment生命期方法均为public</p>
<font color="Green"><br>inflater.inflate(R.layout.fragment_crime, container, false);<br><br>addTextChangedListener()<br></font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_crime);</div><div class="line"></div><div class="line">    FragmentManager fm = getSupportFragmentManager();</div><div class="line">    Fragment f = fm.findFragmentById(R.id.fragment_container);</div><div class="line">    if (f == null) &#123;</div><div class="line">        f = new CrimeFragment();</div><div class="line">        fm.beginTransaction()</div><div class="line">                .add(R.id.fragment_container, f)</div><div class="line">                .commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：</p>
<font color="Green"><br>getSupportFragmentManager()<br><br>findFragmentById(R.id.fragment_container)<br><br>fm.beginTransaction()<br>            .add(R.id.fragment_container, f)<br>            .commit();<br></font>

<font color="Blue"><br>Activity销毁时，FragmentManager会将fragment队列保存下来。在Activity重建时，新的FragmentManager会获得保存的队列，并重建fragment队列，从而恢复原来的状态。<br></font>

<font color="Green"><br>onAttach()<br><br>onCreate()<br><br>onCreateView()<br><br>onActivityCreated()<br><br>- onStart()<br><br>- onResume()<br><br>- onPause()<br><br>- onStop()<br><br>onDestroyView()<br><br>onDestroy()<br><br>onDetach()<br></font>

<table>
<thead>
<tr>
<th>内置版</th>
<th>Support版</th>
</tr>
</thead>
<tbody>
<tr>
<td>Activity</td>
<td>FragmentActivity</td>
</tr>
<tr>
<td>android.app.Fragment</td>
<td>android.suport.v4.app.Fragment</td>
</tr>
<tr>
<td>getFragmentManager()</td>
<td>getSupportFragmentManager()</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fragment的生命周期方法是由托管activity调用的，而activity的生命周期方法由操作系统调用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;fon
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>06. Android SDK Versions and Compatibility</title>
    <link href="http://yoursite.com/2016/09/18/06-Android-SDK-Versions-and-Compatibility/"/>
    <id>http://yoursite.com/2016/09/18/06-Android-SDK-Versions-and-Compatibility/</id>
    <published>2016-09-18T11:37:39.000Z</published>
    <updated>2016-09-18T12:24:53.000Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>版本</th>
<th>代号</th>
<th>API Level</th>
</tr>
</thead>
<tbody>
<tr>
<td>4.1</td>
<td>Jelly Bean</td>
<td>16</td>
</tr>
<tr>
<td>4.2</td>
<td>Jelly Bean</td>
<td>17</td>
</tr>
<tr>
<td>4.3</td>
<td>Jelly Bean</td>
<td>18</td>
</tr>
<tr>
<td>4.4</td>
<td>KitKat</td>
<td>19</td>
</tr>
<tr>
<td>5.0</td>
<td>Lollipop</td>
<td>21</td>
</tr>
<tr>
<td>5.1</td>
<td>Lollipop</td>
<td>22</td>
</tr>
<tr>
<td>6.0</td>
<td>Marshmallow</td>
<td>23</td>
</tr>
<tr>
<td>7.0</td>
<td>Nougat</td>
<td>24</td>
</tr>
</tbody>
</table>
<font color="Green"><br>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {<br><br>}<br></font>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;代号&lt;/th&gt;
&lt;th&gt;API Level&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;td&gt;Jelly Bean&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/t
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>05. Your Second Activity</title>
    <link href="http://yoursite.com/2016/09/18/05-Your-Second-Activity/"/>
    <id>http://yoursite.com/2016/09/18/05-Your-Second-Activity/</id>
    <published>2016-09-18T06:55:17.000Z</published>
    <updated>2016-09-18T11:31:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>tools:text这个属性在preview中显示，运行时不会显示出来</p>
<font color="Green"><br><br>public Intent(Context packageContext, Class&lt;?&gt; cls)<br><br>public Intent putExtra(…)<br><br>public void startActivityForResult(Intent intent, int requestCode)<br><br>getIntent().getBooleanExtra(…);<br></font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent();</div><div class="line">   intent.putExtra(Extra_Cheated, true);</div><div class="line">   setResult(Activity.RESULT_OK, intent);</div></pre></td></tr></table></figure>
<font color="Green"><br>protected void onActivityResult(int requestCode, int resultCode, Intent data)<br></font>

<p>非常有趣的一点，在旋转后，CheatActivity被重新生成，然后其onCreate()函数中 <code>getIntent().getBooleanExtra(Extra_Answer, false);</code> 依然可以获得从QuizActivity传过来的参数。</p>
<font color="Blue"><br>在Activity中调用Activity.finish()方法同样可以将Activity从ActivityManager管理的栈中弹出。<br></font>

<p>注意key值多用 private static String，以及由此产生的生成Intent，取得Result Intent相应函数所处的Activity</p>
<p>#传入时：</p>
<p>在QuizActivity中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private static int REQUEST_CHEAT_ACTIVITY = 0;</div><div class="line"></div><div class="line">Intent intent = CheatActivity.newIntent(QuizActivity.this, quizArray[mCurQuestionIndex].getmTrueFalseAnswer());</div><div class="line">startActivityForResult(intent, REQUEST_CHEAT_ACTIVITY);</div></pre></td></tr></table></figure>
<p>在CheatActivity中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private static final String Extra_Answer = &quot;cheat_activity_extra_answer&quot;;</div><div class="line"></div><div class="line">public static Intent newIntent(Context context, boolean answer) &#123;</div><div class="line">    Intent intent = new Intent(context, CheatActivity.class);</div><div class="line">    intent.putExtra(Extra_Answer, answer);</div><div class="line">    return intent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#传出时：（返回值）<br>在QuizActivity中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private static int REQUEST_CHEAT_ACTIVITY = 0;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">    super.onActivityResult(requestCode, resultCode, data);</div><div class="line">    if (resultCode != Activity.RESULT_OK) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    if (requestCode == REQUEST_CHEAT_ACTIVITY) &#123;</div><div class="line">        if (data == null) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        mCheated = CheatActivity.hasCheated(data);</div><div class="line">        cheatArray[mCurQuestionIndex] = mCheated;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里再次把获取boolean类型的intent extra的任务放到了 <code>CheatActivity.hasCheated(data)</code> 中，传入intent，返回boolean</p>
<p>在CheatActivity中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">private static final String Extra_Cheated = &quot;cheat_activity_extra_cheated&quot;;</div><div class="line"></div><div class="line">public static boolean hasCheated(Intent intent) &#123;</div><div class="line">    return intent.getBooleanExtra(Extra_Cheated, false);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private static final String Extra_Cheated = &quot;cheat_activity_extra_cheated&quot;;</div><div class="line"></div><div class="line">&#123;</div><div class="line">        Intent intent = new Intent();</div><div class="line">        intent.putExtra(Extra_Cheated, true);</div><div class="line">        setResult(Activity.RESULT_OK, intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><font color="Red"><br>用Intent传来传去，需要用到putExtra，是key-value的</font></p>
<p>Activity在旋转时重新生成，需要Bundle的putXXXXX，也是key-value的</p>
<p>生成了好多key，取名字是个问题</p>
<ul>
<li>有没有更好的方法</li>
<li>key的命名应该遵循某种统一的规则<br></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tools:text这个属性在preview中显示，运行时不会显示出来&lt;/p&gt;
&lt;font color=&quot;Green&quot;&gt;&lt;br&gt;&lt;br&gt;public Intent(Context packageContext, Class&amp;lt;?&amp;gt; cls)&lt;br&gt;&lt;br&gt;publ
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>04. Debugging Android Apps</title>
    <link href="http://yoursite.com/2016/09/18/04-Debugging-Android-Apps/"/>
    <id>http://yoursite.com/2016/09/18/04-Debugging-Android-Apps/</id>
    <published>2016-09-18T02:20:39.000Z</published>
    <updated>2016-09-18T03:59:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Run -&gt; View Breakpoints</p>
<p>Android Lint : Analyze -&gt; Inspect Code</p>
<font color="Red"><br>怎么用好Lint？现在报的好多错误看不懂啊 ~<br></font>

<p>Tools -&gt; Android -&gt; Sync Project with Gradle</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Run -&amp;gt; View Breakpoints&lt;/p&gt;
&lt;p&gt;Android Lint : Analyze -&amp;gt; Inspect Code&lt;/p&gt;
&lt;font color=&quot;Red&quot;&gt;&lt;br&gt;怎么用好Lint？现在报的好多错误看不懂啊 ~&lt;br&gt;&lt;/font&gt;

    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>03. The Activity Lifecycle</title>
    <link href="http://yoursite.com/2016/09/16/03-The-Activity-Lifecycle/"/>
    <id>http://yoursite.com/2016/09/16/03-The-Activity-Lifecycle/</id>
    <published>2016-09-16T13:18:43.000Z</published>
    <updated>2016-09-18T02:14:03.000Z</updated>
    
    <content type="html"><![CDATA[<font color="Green"><br>onCreate()<br><br>onStart()<br><br>onResume()<br><em>*</em><br>onPause()<br><br>onStop()<br><br>onDestroy()<br></font>

<font color="Blue"><br>res -&gt; new Resource Directory -&gt; layout -&gt; orientation -&gt; Landscape<br></font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onSaveInstanceState(Bundle outState)</div></pre></td></tr></table></figure>
<font color="Blue"><br>在Bundle中存储和恢复的数据类型只能是primitive type或实现了Serializable或Parcelable接口的对象<br></font>

]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;Green&quot;&gt;&lt;br&gt;onCreate()&lt;br&gt;&lt;br&gt;onStart()&lt;br&gt;&lt;br&gt;onResume()&lt;br&gt;&lt;em&gt;*&lt;/em&gt;&lt;br&gt;onPause()&lt;br&gt;&lt;br&gt;onStop()&lt;br&gt;&lt;br&gt;onDestroy()&lt;br&gt;&lt;/fon
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>02, Android and Model-View-Controller</title>
    <link href="http://yoursite.com/2016/09/14/02-Android-and-Model-View-Controller/"/>
    <id>http://yoursite.com/2016/09/14/02-Android-and-Model-View-Controller/</id>
    <published>2016-09-14T08:45:03.000Z</published>
    <updated>2016-09-15T12:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/AndroidProgramming/0201.png" alt=""></p>
<font color="Red">这里有个很蛋疼的问题，R.id.xxxxx，取回来都是一个整型的resId，怎么直接取到相应的String呢？</font>

<font color="Green"><br>TextView.setText()<br><br>Toast.makeText().show()<br></font>



<font color="Blue"><br>drawable-mdpi<br><br>drawable-hdpi<br><br>drawable-xhdpi<br><br>drawable-xxhdpi<br><br>都在 <code>src/main/res/</code> 下<br></font>



<font color="Green"><br>android:drawableRight=”@drawable/xxxxx”<br><br>android:drawablePadding<br><br>ImageButton<br><br>android:src<br></font>

<font color="Red"><br>Button的继承树，和ImageButton，居然相去甚远，为啥不统一起来？<br><br>Button -&gt; TextView -&gt; View<br><br>ImageButton -&gt; ImageView -&gt; View<br></font>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/AndroidProgramming/0201.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;font color=&quot;Red&quot;&gt;这里有个很蛋疼的问题，R.id.xxxxx，取回来都是一个整型的resId，怎么直接取到相应的String呢？&lt;/fon
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo技巧</title>
    <link href="http://yoursite.com/2016/09/14/Hexo%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2016/09/14/Hexo技巧/</id>
    <published>2016-09-14T07:58:41.000Z</published>
    <updated>2016-09-14T08:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>技巧不断补充… …</p>
<h1 id="首页仅仅显示摘要"><a href="#首页仅仅显示摘要" class="headerlink" title="首页仅仅显示摘要"></a>首页仅仅显示摘要</h1><p>在文章中加入<code>&lt;!-- more --&gt;</code>，上面的部分为摘要</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;技巧不断补充… …&lt;/p&gt;
&lt;h1 id=&quot;首页仅仅显示摘要&quot;&gt;&lt;a href=&quot;#首页仅仅显示摘要&quot; class=&quot;headerlink&quot; title=&quot;首页仅仅显示摘要&quot;&gt;&lt;/a&gt;首页仅仅显示摘要&lt;/h1&gt;&lt;p&gt;在文章中加入&lt;code&gt;&amp;lt;!-- more --&amp;g
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>01, Your First Android Application</title>
    <link href="http://yoursite.com/2016/09/14/01-Your-First-Android-Application/"/>
    <id>http://yoursite.com/2016/09/14/01-Your-First-Android-Application/</id>
    <published>2016-09-14T06:59:27.000Z</published>
    <updated>2016-09-14T07:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>需求截图:</p>
<a id="more"></a>
<p><img src="/images/AndroidProgramming/0101.png" alt=""></p>
<font color="Green">RelativeLayout<br><br>TextView</font>

<p><img src="/images/AndroidProgramming/0102.png" alt=""></p>
<font color="Green">LinearLayout<br><br>TextView<br><br>Button</font>

<p>一些在<code>&lt; &gt;</code>里的属性:</p>
<font color="Green">layout_width (可为<code>wrap_content</code>或<code>match_parent</code>)<br><br>layout_height<br><br>padding<br><br>gravity (<code>默认是左上角</code>)<br><br>orientation<br><br>text</font>

<p>stirngs.xml用于字符串常量，代码中用<code>@string/xxxxx</code>来引用</p>
<p>@+id/xxxxx用于给widget添加id</p>
<font color="Orange">command + o : filter并跳转到class</font>

<ul>
<li><font color="Red">如何自动插入xmlns:android=”<a href="http://schemas.android.com/apk/res/android" target="_blank" rel="external">http://schemas.android.com/apk/res/android</a>“</font></li>
<li><font color="Red">如何像xcode一样filter出不同的文件名，如*.xml文件</font></li>
<li><font color="Red">什么string放到strings.xml，什么不用放，规则，命名规范</font>

</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Activity</div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;&#125;</div><div class="line">findViewById();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Toast.makeText();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需求截图:&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>初级Android程序员 计划 &amp; 总纲</title>
    <link href="http://yoursite.com/2016/09/13/Android-Programming-%E8%AE%A1%E5%88%92-%E6%80%BB%E7%BA%B2/"/>
    <id>http://yoursite.com/2016/09/13/Android-Programming-计划-总纲/</id>
    <published>2016-09-13T08:49:09.000Z</published>
    <updated>2016-09-14T07:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>9月15日 - 10月31日</p>
<ol>
<li>每天一章 《Android Programming - The Big Nerd Ranch Guide, 2nd Edition》，包括手敲代码</li>
<li>在[1]完成后，花1周通览一遍《疯狂Android讲义，第三版》</li>
</ol>
<a id="more"></a>
<h1 id="规矩"><a href="#规矩" class="headerlink" title="规矩"></a>规矩</h1><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>抒情文字（其实就是絮叨）</td>
<td>用到markdown里的引用></td>
</tr>
<tr>
<td>正常行文</td>
<td>default字体颜色</td>
</tr>
<tr>
<td>需要记忆（背下来！）</td>
<td><font color="Green"> 绿色 </font></td>
</tr>
<tr>
<td>小技巧, Tip</td>
<td><font color="Orange"> 桔色 </font></td>
</tr>
<tr>
<td>可记可不记，至少混个眼熟</td>
<td><font color="Blue"> 蓝色 </font></td>
</tr>
<tr>
<td>疑问，留待以后解决</td>
<td><font color="Red"> 红色 </font></td>
</tr>
</tbody>
</table>
<h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>GeoQuiz</td>
<td>1, 2, 3, 5, 6</td>
</tr>
<tr>
<td>CriminalItent</td>
<td>7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 33</td>
</tr>
<tr>
<td>BeatBox</td>
<td>18, 19, 20, 21, 33</td>
</tr>
<tr>
<td>NerdLauncher</td>
<td>22</td>
</tr>
<tr>
<td>PhotoGallery</td>
<td>23, 24, 25, 26, 27, 28</td>
</tr>
<tr>
<td>DragAndDraw</td>
<td>29</td>
</tr>
<tr>
<td>Sunset</td>
<td>30</td>
</tr>
<tr>
<td>Locatr</td>
<td>31, 32</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>章节</th>
<th>重点</th>
</tr>
</thead>
<tbody>
<tr>
<td>1. Your First Android Application</td>
<td><a href="https://caileigtd.github.io/2016/09/14/01-Your-First-Android-Application/" target="_blank" rel="external">链接</a></td>
</tr>
<tr>
<td>2. Android and Model-View-Controller</td>
<td></td>
</tr>
<tr>
<td>3. The Activity Lifecycle</td>
<td></td>
</tr>
<tr>
<td>4. Debugging Android Apps</td>
<td></td>
</tr>
<tr>
<td>5. <strong><font color="Red">Your Second Activity</font></strong></td>
<td></td>
</tr>
<tr>
<td>6. Android SDK Versions and Compatibility</td>
<td></td>
</tr>
<tr>
<td>7. <strong><font color="Red">UI Fragments and the Fragment Manager</font></strong></td>
<td></td>
</tr>
<tr>
<td>8. Creating User Interfaces with Layouts and Widgets</td>
<td></td>
</tr>
<tr>
<td>9. <strong><font color="Red">Displaying Lists with RecyclerView</font></strong></td>
<td></td>
</tr>
<tr>
<td>10. <strong><font color="Red">Using Fragment Arguments</font></strong></td>
<td></td>
</tr>
<tr>
<td>11. <strong><font color="Red">Using ViewPager</font></strong></td>
<td></td>
</tr>
<tr>
<td>12. <strong><font color="Red">Dialogs</font></strong></td>
<td></td>
</tr>
<tr>
<td>13. <strong><font color="Red">The Toolbar</font></strong></td>
<td></td>
</tr>
<tr>
<td>14. SQLite Databases</td>
<td></td>
</tr>
<tr>
<td>15. <strong><font color="Red">Implicit Intents</font></strong></td>
<td></td>
</tr>
<tr>
<td>16. Taking Pictures with Intents</td>
<td></td>
</tr>
<tr>
<td>17. Two-Pane Master-Detail Interfaces</td>
<td></td>
</tr>
<tr>
<td>18. Assets</td>
<td></td>
</tr>
<tr>
<td>19. Audio Playback with SoundPool</td>
<td></td>
</tr>
<tr>
<td>20. Styles and Themes</td>
<td></td>
</tr>
<tr>
<td>21. <strong><font color="Red">XML Drawables</font></strong></td>
<td></td>
</tr>
<tr>
<td>22. <strong><font color="Red">More About Intents and Tasks</font></strong></td>
<td></td>
</tr>
<tr>
<td>23. HTTP &amp; Background Tasks</td>
<td></td>
</tr>
<tr>
<td>24. <strong><font color="Red">Loppers, Handlers, and HandlerThread</font></strong></td>
<td></td>
</tr>
<tr>
<td>25. Search</td>
<td></td>
</tr>
<tr>
<td>26. Background Services</td>
<td></td>
</tr>
<tr>
<td>27. <strong><font color="Red">Broadcast Intents</font></strong></td>
<td></td>
</tr>
<tr>
<td>28. Browsing the Web and WebView</td>
<td></td>
</tr>
<tr>
<td>29. <strong><font color="Red">Custom Views and Touch Events</font></strong></td>
<td></td>
</tr>
<tr>
<td>30. <strong><font color="Red">Property Animation</font></strong></td>
<td></td>
</tr>
<tr>
<td>31. Locations and Play Services</td>
<td></td>
</tr>
<tr>
<td>32. Maps</td>
<td></td>
</tr>
<tr>
<td>33. <strong><font color="Red">Material Design</font></strong></td>
<td></td>
</tr>
<tr>
<td>34. Afterword</td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h1&gt;&lt;p&gt;9月15日 - 10月31日&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每天一章 《Android Programming - The Big Nerd Ranch Guide, 2nd Edition》，包括手敲代码&lt;/li&gt;
&lt;li&gt;在[1]完成后，花1周通览一遍《疯狂Android讲义，第三版》&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>初尝Android之开篇</title>
    <link href="http://yoursite.com/2016/09/13/%E5%88%9D%E5%B0%9DAndroid%E4%B9%8B%E5%BC%80%E7%AF%87/"/>
    <id>http://yoursite.com/2016/09/13/初尝Android之开篇/</id>
    <published>2016-09-13T06:29:50.000Z</published>
    <updated>2016-09-14T07:56:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人背景"><a href="#个人背景" class="headerlink" title="个人背景"></a>个人背景</h1><ul>
<li>有近10年的工作经验，近4年的ios经验</li>
<li>曾经纯纯的coder，现在管理整个Mobile Team包括ios, android, test</li>
<li>ios算不上大牛，但在工作中基本也没有搞不定的feature，解不出的bug</li>
<li>现在每天能有个把个小时自由支配的时间（x, x &gt;= 1 &amp;&amp; x &lt;= 3）</li>
</ul>
<a id="more"></a>
<h1 id="学习原因"><a href="#学习原因" class="headerlink" title="学习原因"></a>学习原因</h1><ul>
<li>曾经带领的ios team现在做项目基本让人省心，ios框架、人员都稳定成熟</li>
<li>android团队，人员大部分新人，水平参差不齐，但全部为初、中级；目前android组内没有统一框架、规范，疑难杂症基本很难解决；暂时属于自由发挥，走哪儿算哪儿的状态</li>
</ul>
<blockquote>
<p>鉴于以上，决心在中秋之后，年底之前 （2016.09.15 - 2016.12.31）争取混成android组内的<code>一哥</code>，也不知道是不是过于狂妄自大了一些。</p>
</blockquote>
<h1 id="敌我分析"><a href="#敌我分析" class="headerlink" title="敌我分析"></a>敌我分析</h1><h2 id="我之优势"><a href="#我之优势" class="headerlink" title="我之优势"></a>我之优势</h2><ul>
<li>语言基础还不错，C++、Java语法层面应该问题不大</li>
<li>有4年ios经验</li>
<li>学习能力还不弱，至少不算笨吧，领悟力结合经验，虽然可能不如 <code>杨过</code> ，但怎么比 <code>郭靖</code> 强些的</li>
<li>持之以恒的毅力方面应该已经过历史验证</li>
<li><code>一哥</code>是玩笑了，其实我只需要能写feature，能帮android team解决疑难杂症就还好了，搬砖这种进度压力下的大强度重复劳动，我这里应该没有</li>
</ul>
<h2 id="我之劣势"><a href="#我之劣势" class="headerlink" title="我之劣势"></a>我之劣势</h2><ul>
<li>虽然有可支配的时间，但时间段并不整。工作时经常被领导、同事打断；回家后儿子不拿iphone砸坏我的rmbp我已经谢天谢地</li>
<li>比较懒，书上的例子有现成CD，上的code常常自以为懂了，所以不愿意自己再动手敲一遍。其实入门主要靠大量的、重复的练习</li>
<li>入门可能并不难，但留给我的时间挺少的，况且我的目标不是入门了就OK的，还要想法成 <code>一哥</code> 的</li>
</ul>
<h1 id="神之目标、计划"><a href="#神之目标、计划" class="headerlink" title="神之目标、计划"></a>神之目标、计划</h1><blockquote>
<p>好了，废话说了一箩筐，订下此次 <code>初尝Android</code> 的目标</p>
</blockquote>
<h2 id="1-选定一本入门书籍，一个月半月的时间学习完"><a href="#1-选定一本入门书籍，一个月半月的时间学习完" class="headerlink" title="1. 选定一本入门书籍，一个月半月的时间学习完"></a>1. 选定一本入门书籍，一个月半月的时间学习完</h2><p>不太差的书一本足以，以前考研时，地摊买了本￥8的考研数学，从头做到尾，加上最后突击做了几套试卷，居然也考出了全系数学第二的成绩（英语、政治永远的痛啊）。所以书不在多，关键是能坚持从头搞到尾。但毕竟磨刀不误砍柴工，还是花了一点时间挑了两本（之所以要两本，万一有本里有错误，多少有个参照）。</p>
<ul>
<li><strong>主</strong> <code>《Android Programming: The Big Nerd Ranch Guide, 2nd Edition》</code>, 这本从头到尾通读一下，以英文的为主，买了个盗版的中文，反正翻译就那么回事儿，床头撕吧撕吧，随翻随记随扔，也不心疼。总共34章，一天一章的话，一个月搞定。<code>每个例子都需要亲手敲一下，不能对照书，看完以后合上书敲</code></li>
<li><strong>辅</strong> <code>《疯狂Android讲义，第三版》</code>, 国人的原创，买了本正版，算是支持下，另外这个不是学习主力，可以留他个全尸 ^_^ 。在 <strong>主</strong> 的例子都弄完以后，这本花一周。</li>
</ul>
<h2 id="2-常用的框架熟悉，目前想到的包括："><a href="#2-常用的框架熟悉，目前想到的包括：" class="headerlink" title="2.  常用的框架熟悉，目前想到的包括："></a>2.  常用的框架熟悉，目前想到的包括：</h2><p>这些个库，目前都是听了个名儿，看别人的开源App，公司的Android App里面有用到。然后制定计划的时候时不时查到一些blog也经常提到，在android入门了以后需要看看，也为后面定规矩，统一team埋下伏笔。</p>
<p>原则上以现在的caib水平，任何一个库都是够用的了，跟读书一个道理，无论用哪个库，只要都搞得门儿清了，哪个都是好的不得了的。所以选择起来就简单了。</p>
<p>基于这个原则其实很容易拍脑袋，现在基本就能定下来：(本着不偏不倚，实际上每个公司的风格都了解下，多学总没啥坏处)</p>
<table>
<thead>
<tr>
<th>开源库</th>
<th>框架用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>Retrofit + OkHttp</td>
<td>源自<code>Square</code>的 网络框架</td>
</tr>
<tr>
<td>Gson</td>
<td>源自<code>Google</code>的 JSON序列化、反序列化 &lt;-&gt; POJO（Plain Ordinary Java Object）</td>
</tr>
<tr>
<td>Fresco</td>
<td>源自<code>Facebook</code>的 图片加载、缓存</td>
</tr>
<tr>
<td>Flux</td>
<td><code>？ 一套解耦的框架，但只是思想，需要自己理解并实现 ？</code></td>
</tr>
</tbody>
</table>
<h2 id="3-统一框架、统一coding-standard，为code-review打好基础"><a href="#3-统一框架、统一coding-standard，为code-review打好基础" class="headerlink" title="3.  统一框架、统一coding standard，为code review打好基础"></a>3.  统一框架、统一coding standard，为code review打好基础</h2><p>这个没啥好说的，folder结构，文件命名，Java Coding Standard</p>
<h2 id="4-通过不断和team一起分析、编码、review-code，由-初-升-中"><a href="#4-通过不断和team一起分析、编码、review-code，由-初-升-中" class="headerlink" title="4.  通过不断和team一起分析、编码、review code，由 初 升 中"></a>4.  通过不断和team一起分析、编码、review code，由 <code>初</code> 升 <code>中</code></h2><h2 id="5-通过理解现有代码，并结合经验refactor，以及修复疑难杂症的bug，由-中-升-高"><a href="#5-通过理解现有代码，并结合经验refactor，以及修复疑难杂症的bug，由-中-升-高" class="headerlink" title="5.  通过理解现有代码，并结合经验refactor，以及修复疑难杂症的bug，由 中 升 高"></a>5.  通过理解现有代码，并结合经验refactor，以及修复疑难杂症的bug，由 <code>中</code> 升 <code>高</code></h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;个人背景&quot;&gt;&lt;a href=&quot;#个人背景&quot; class=&quot;headerlink&quot; title=&quot;个人背景&quot;&gt;&lt;/a&gt;个人背景&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;有近10年的工作经验，近4年的ios经验&lt;/li&gt;
&lt;li&gt;曾经纯纯的coder，现在管理整个Mobile Team包括ios, android, test&lt;/li&gt;
&lt;li&gt;ios算不上大牛，但在工作中基本也没有搞不定的feature，解不出的bug&lt;/li&gt;
&lt;li&gt;现在每天能有个把个小时自由支配的时间（x, x &amp;gt;= 1 &amp;amp;&amp;amp; x &amp;lt;= 3）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Blog搭建</title>
    <link href="http://yoursite.com/2016/09/12/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/09/12/用Hexo搭建博客/</id>
    <published>2016-09-12T11:47:14.000Z</published>
    <updated>2016-09-14T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-next-github搭建Blog"><a href="#hexo-next-github搭建Blog" class="headerlink" title="hexo, next, github搭建Blog"></a>hexo, next, github搭建Blog</h1><ul>
<li>下载并安装<a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a></li>
<li>安装hexo</li>
</ul>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo</div></pre></td></tr></table></figure>
<ul>
<li>生成博客路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir HexoBlog</div><div class="line">cd HexoBlog</div><div class="line">hexo init</div></pre></td></tr></table></figure>
<ul>
<li>安装插件</li>
</ul>
<table>
<thead>
<tr>
<th>插件</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>npm install hexo-deployer-git –save</td>
<td>向github发布blog</td>
</tr>
<tr>
<td>npm install hexo-generator-feed –save</td>
<td>添加rss</td>
</tr>
</tbody>
</table>
<h1 id="各种配置"><a href="#各种配置" class="headerlink" title="各种配置"></a>各种配置</h1><ul>
<li>_config.yml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">title: 菜菜园子 </div><div class="line">author: cailei</div><div class="line">language: zh-Hans</div><div class="line"></div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:caileiGTD/caileiGTD.github.io.git</div><div class="line">  branch: master</div><div class="line"></div><div class="line">rss: /atom.xml</div></pre></td></tr></table></figure>
<ul>
<li><p>添加头像themes/next/source/images/avatar.jpg</p>
</li>
<li><p>themes/next/_config.yml</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">avatar: /images/avatar.jpg</div><div class="line"></div><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  categories: /categories</div><div class="line">  archives: /archives</div><div class="line">  </div><div class="line">scheme: Mist</div></pre></td></tr></table></figure>
<ul>
<li>默认post模板添加categories, scaffolds/post.md</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">categories:</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>hexo n “文章名”<br>hexo p (publish)<br>hexo g (generate)<br>hexo s (server)<br>hexo d (deploy)</p>
<h1 id="删除HelloWorld"><a href="#删除HelloWorld" class="headerlink" title="删除HelloWorld"></a>删除HelloWorld</h1><p>hexo安装好后有个HelloWorld的post，现在将其删除</p>
<ul>
<li>delete source/_post/HelloWorld.md</li>
<li>hexo clean</li>
<li>hexo generate</li>
</ul>
<h1 id="坑爹"><a href="#坑爹" class="headerlink" title="坑爹"></a>坑爹</h1><p>开始时点categories显示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cannot GET XXX</div></pre></td></tr></table></figure>
<p>然后查到了 <a href="http://darren90.github.io/2015/08/01/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/" target="_blank" rel="external">这篇文章</a> 其中对 <code>source/categories/index.md</code> 文件中的内容写的如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">layout: categories</div><div class="line">title: categories</div><div class="line">---</div></pre></td></tr></table></figure>
<p>照着修改后，解决了 <code>Cannot GET XXX</code> 的问题，但是categories点进去还是一片空白，于是又查到了 <a href="https://segmentfault.com/q/1010000002561642" target="_blank" rel="external">另一篇文章</a></p>
<p>实际上 <code>source/categories/index.md</code> 的内容应该如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">title: categories</div><div class="line">type: &quot;categories&quot;</div><div class="line">---</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><table>
<thead>
<tr>
<th>url</th>
<th>解决的问题</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://xiaodev.cn/2015/08/12/github-hexo搭建博客/" target="_blank" rel="external">http://xiaodev.cn/2015/08/12/github-hexo搭建博客/</a></td>
<td>mac osx下搭建</td>
</tr>
<tr>
<td><a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="external">https://segmentfault.com/a/1190000002632530</a></td>
<td>rss</td>
</tr>
<tr>
<td><a href="https://segmentfault.com/q/1010000002561642" target="_blank" rel="external">https://segmentfault.com/q/1010000002561642</a></td>
<td>categories, tags</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo-next-github搭建Blog&quot;&gt;&lt;a href=&quot;#hexo-next-github搭建Blog&quot; class=&quot;headerlink&quot; title=&quot;hexo, next, github搭建Blog&quot;&gt;&lt;/a&gt;hexo, next, github搭建Blog&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;下载并安装&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;安装hexo&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="杂项" scheme="http://yoursite.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
</feed>
