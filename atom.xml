<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜菜园子</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-10T10:18:45.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cailei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>21. XML drawable</title>
    <link href="http://yoursite.com/2016/10/10/21-XML-drawable/"/>
    <id>http://yoursite.com/2016/10/10/21-XML-drawable/</id>
    <published>2016-10-10T09:23:53.000Z</published>
    <updated>2016-10-10T10:18:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>诚然这章听上去比较重要，但是实际就是几个文件，xml属性，了解了就OK了。</p>
<h1 id="shape-drawable-xxx-normal-xml"><a href="#shape-drawable-xxx-normal-xml" class="headerlink" title="shape drawable, xxx_normal.xml"></a>shape drawable, xxx_normal.xml</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">       android:shape=&quot;oval&quot;&gt;</div><div class="line"></div><div class="line">    &lt;solid</div><div class="line">        android:color=&quot;@color/dark_blue&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure>
<h1 id="state-list-drawable-xxx-xml"><a href="#state-list-drawable-xxx-xml" class="headerlink" title="state list drawable, xxx.xml"></a>state list drawable, xxx.xml</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/button_beat_box_pressed&quot;</div><div class="line">          android:state_pressed=&quot;true&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/button_beat_box_normal&quot; /&gt;</div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure>
<h1 id="layer-list-drawable-xxx-pressed-xml"><a href="#layer-list-drawable-xxx-pressed-xml" class="headerlink" title="layer list drawable, xxx_pressed.xml"></a>layer list drawable, xxx_pressed.xml</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;item&gt;</div><div class="line">        &lt;shape</div><div class="line">            android:shape=&quot;oval&quot;&gt;</div><div class="line"></div><div class="line">            &lt;solid</div><div class="line">                android:color=&quot;@color/red&quot;/&gt;</div><div class="line">        &lt;/shape&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line">    &lt;item&gt;</div><div class="line">        &lt;shape</div><div class="line">            android:shape=&quot;oval&quot;&gt;</div><div class="line"></div><div class="line">            &lt;stroke</div><div class="line">                android:width=&quot;4dp&quot;</div><div class="line">                android:color=&quot;@color/dark_red&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;/shape&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line">&lt;/layer-list&gt;</div></pre></td></tr></table></figure>
<p>真正是用的时候，只需如此：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;BeatBoxButton&quot; parent=&quot;android:style/Widget.Holo.Button&quot;&gt;</div><div class="line">    &lt;item name=&quot;android:background&quot;&gt;@drawable/button_beat_box&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h1 id="9-patch"><a href="#9-patch" class="headerlink" title=".9 patch"></a>.9 patch</h1><p>top, left标记了图像的可伸缩区域，bottom, right定义了drawable区域，是绘制内容（通常是文字）的地方。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;诚然这章听上去比较重要，但是实际就是几个文件，xml属性，了解了就OK了。&lt;/p&gt;
&lt;h1 id=&quot;shape-drawable-xxx-normal-xml&quot;&gt;&lt;a href=&quot;#shape-drawable-xxx-normal-xml&quot; class=&quot;headerli
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>20. Styles and Themes</title>
    <link href="http://yoursite.com/2016/10/10/20-Styles-and-Themes/"/>
    <id>http://yoursite.com/2016/10/10/20-Styles-and-Themes/</id>
    <published>2016-10-10T09:09:09.000Z</published>
    <updated>2016-10-10T09:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>实话实说，这章真的不知道讲的是啥。记住两个名字 <code>style</code>&amp; <code>theme</code>，其中默认的theme应该就是 <code>AppTheme</code> 这个名字。搜了下我们的app里没有自定义的theme，倒是style里每个人貌似都加入了一些东东</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:theme=&quot;@style/AppTheme&quot;</div></pre></td></tr></table></figure>
<p>个人理解 style 就是把一堆相同的属性弄到一起，方便layout文件里拿来就用，免得啰嗦：</p>
<p>下面这个是真实项目中的一个例子，虽然，我依旧觉得命名如同狗屎：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">	style=&quot;@style/workshop_detail_tv_1&quot;</div><div class="line">	android:text=&quot;@string/subject&quot; /&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;workshop_detail_tv_1&quot;&gt;</div><div class="line">    &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;android:layout_height&quot;&gt;@dimen/dimen_45dp&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;android:layout_gravity&quot;&gt;center_vertical&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;android:gravity&quot;&gt;center&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;android:layout_marginLeft&quot;&gt;@dimen/dimen_15dp&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;android:textColor&quot;&gt;@color/color_a1a7ae&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;android:textSize&quot;&gt;@dimen/dimen_15sp&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实话实说，这章真的不知道讲的是啥。记住两个名字 &lt;code&gt;style&lt;/code&gt;&amp;amp; &lt;code&gt;theme&lt;/code&gt;，其中默认的theme应该就是 &lt;code&gt;AppTheme&lt;/code&gt; 这个名字。搜了下我们的app里没有自定义的theme，倒是styl
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>19. Audio Playback with SoundPool</title>
    <link href="http://yoursite.com/2016/10/10/19-Audio-Playback-with-SoundPool/"/>
    <id>http://yoursite.com/2016/10/10/19-Audio-Playback-with-SoundPool/</id>
    <published>2016-10-10T08:50:47.000Z</published>
    <updated>2016-10-10T08:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>setRetainInstance(true)</code><br>新的Activity -&gt; 新的FragmentManager -&gt; <font color="orange">老的</font>Fragment -&gt; 新的RecyclerView</p>
<p><code>setRetainInstance(false)</code> 这个是默认<br>新的Activity -&gt; 新的FragmentManager -&gt; <font color="orange">新的</font>Fragment -&gt; 新的RecyclerView</p>
<p>保留的fragment只能处理activity因设备旋转而销毁的情况。如果activity是因操作系统需要回收内存而被销毁，则所有保留的fragment也会随之销毁。</p>
<p>这章最终升华为：何时用 <code>onSaveInstanceState</code>，何时用 <code>setRetainInstance(true)</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;setRetainInstance(true)&lt;/code&gt;&lt;br&gt;新的Activity -&amp;gt; 新的FragmentManager -&amp;gt; &lt;font color=&quot;orange&quot;&gt;老的&lt;/font&gt;Fragment -&amp;gt; 新的RecyclerV
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>18. Assets</title>
    <link href="http://yoursite.com/2016/10/10/18-Assets/"/>
    <id>http://yoursite.com/2016/10/10/18-Assets/</id>
    <published>2016-10-10T02:39:33.000Z</published>
    <updated>2016-10-10T08:37:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android有assets和resources两大资源系统<br>这章其实讲assets的地方并没啥复杂，记住以下几个函数就好了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">AssetManager am = getActivity().getAssets();</div><div class="line">   String[] filepaths = null;</div><div class="line">   try &#123;</div><div class="line">       filepaths = am.list(&quot;sample_sounds&quot;);</div><div class="line">   &#125; catch (IOException e) &#123;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>不过正好是个机会，再次回顾一下recyclerview，如果说ios中70%的情况都是和tableview打交道，那么recyclerview就是android中的tableview，多写多熟练就好了。</p>
<font color="red"><br>先记录个坑:<br><br>appcompat, recyclerview的版本需要保持一致，否则运行时会出 <code>FAILURE xxxxx Multiple dex files define</code> 这种错误。<br><br>需要把两个依赖lib都”-“了，重新”+”一遍。<br></font>

<p>包含activity，fragment，list_item</p>
<h3 id="activity里就是个-FrameLayout-id就是fragment-container"><a href="#activity里就是个-FrameLayout-id就是fragment-container" class="headerlink" title="activity里就是个 FrameLayout, id就是fragment_container"></a>activity里就是个 FrameLayout, id就是fragment_container</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;FrameLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:id=&quot;@+id/fragment_container&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="fragment里就是个recyclerview"><a href="#fragment里就是个recyclerview" class="headerlink" title="fragment里就是个recyclerview"></a>fragment里就是个recyclerview</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v7.widget.RecyclerView </div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:id=&quot;@+id/recycler_view_beat_box&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="list-item里就是个Button"><a href="#list-item里就是个Button" class="headerlink" title="list_item里就是个Button"></a>list_item里就是个Button</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Button </div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:id=&quot;@+id/sound_button&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;100dp&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="在activity的onCreate中，为fragment-container添加fragment"><a href="#在activity的onCreate中，为fragment-container添加fragment" class="headerlink" title="在activity的onCreate中，为fragment_container添加fragment"></a>在activity的onCreate中，为fragment_container添加fragment</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FragmentManager fm = getSupportFragmentManager();</div><div class="line">Fragment f = fm.findFragmentById(R.id.fragment_container);</div><div class="line">if (f == null) &#123;</div><div class="line">    f = new BeatBoxFragment();</div><div class="line">    fm.beginTransaction()</div><div class="line">            .add(R.id.fragment_container, f)</div><div class="line">            .commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在fragment的onCreateView中，配置好recyclerview用GridLayoutManager，并且设置recyclerview的adapter，然后返回从fragment-inflate出来的view"><a href="#在fragment的onCreateView中，配置好recyclerview用GridLayoutManager，并且设置recyclerview的adapter，然后返回从fragment-inflate出来的view" class="headerlink" title="在fragment的onCreateView中，配置好recyclerview用GridLayoutManager，并且设置recyclerview的adapter，然后返回从fragment inflate出来的view"></a>在fragment的onCreateView中，配置好recyclerview用GridLayoutManager，并且设置recyclerview的adapter，然后返回从fragment inflate出来的view</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">    View v = inflater.inflate(R.layout.fragment_beat_box, container, false);</div><div class="line">    RecyclerView rv = (RecyclerView)v.findViewById(R.id.recycler_view_beat_box);</div><div class="line">    rv.setLayoutManager(new GridLayoutManager(getActivity(), 3));</div><div class="line">    rv.setAdapter(new SoundAdaptor());</div><div class="line">    return v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ViewHolder，初始化时搞定各个子view和iVal的关联，bindModel时，根据model设置view相关属性"><a href="#ViewHolder，初始化时搞定各个子view和iVal的关联，bindModel时，根据model设置view相关属性" class="headerlink" title="ViewHolder，初始化时搞定各个子view和iVal的关联，bindModel时，根据model设置view相关属性"></a>ViewHolder，初始化时搞定各个子view和iVal的关联，bindModel时，根据model设置view相关属性</h3><h3 id="Adaptor，onCreateViewHolder时，inflate出list-item作为ViewHolder初始化参数；onBindViewHolder在model队列里找出相应item并对ViewHolder-bindModel；getItemCount返回model队列里item个数"><a href="#Adaptor，onCreateViewHolder时，inflate出list-item作为ViewHolder初始化参数；onBindViewHolder在model队列里找出相应item并对ViewHolder-bindModel；getItemCount返回model队列里item个数" class="headerlink" title="Adaptor，onCreateViewHolder时，inflate出list_item作为ViewHolder初始化参数；onBindViewHolder在model队列里找出相应item并对ViewHolder bindModel；getItemCount返回model队列里item个数"></a>Adaptor，onCreateViewHolder时，inflate出list_item作为ViewHolder初始化参数；onBindViewHolder在model队列里找出相应item并对ViewHolder bindModel；getItemCount返回model队列里item个数</h3><p>好像也就这么简单 <del>~ ~</del> 还是那句话，名字很重要，等本书学完一遍，结合Flux流程，要好好review一下coding standard并严格执行 <del>~ ~</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android有assets和resources两大资源系统&lt;br&gt;这章其实讲assets的地方并没啥复杂，记住以下几个函数就好了&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>国庆回来</title>
    <link href="http://yoursite.com/2016/10/08/%E5%9B%BD%E5%BA%86%E5%9B%9E%E6%9D%A5/"/>
    <id>http://yoursite.com/2016/10/08/国庆回来/</id>
    <published>2016-10-08T03:23:08.000Z</published>
    <updated>2016-10-10T02:38:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>国庆回来，满满的罪恶感，本来计划在家里好好看书学习的。但是确实没有心情与心境。放纵一天，干脆破罐子破摔，整个假期就是吃、喝、玩、乐。书不仅一页未读，甚至把节前看的还回去了一多半。</p>
<p>好在做笔记就这点好处，你可以快速的回顾一遍之前的重点。</p>
<p>人老了，记性不好，只能靠规矩来加强自己的战斗点数了。</p>
<p>所以节后回来，花一天的时间回顾一下之前的章节，然后需要抓紧开始下面的部分。</p>
<p>Flux架构的理解与应用又提到一个紧张的日程之上了 ~~~ 好在最终决定android暂时先不大规模重构，也算有口喘息之机吧。</p>
<hr>
<p>然后研究Flux，各种源码，又花费了整整2天，现在感觉Java Android的Flux已经基本胸有成竹了，最终限制的目前还是android开发，以及更高层的java语言的种种细节了。</p>
<p>今天开始继续 《Android Programming - The Big Nerd Ranch Guide, 2nd Edition》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国庆回来，满满的罪恶感，本来计划在家里好好看书学习的。但是确实没有心情与心境。放纵一天，干脆破罐子破摔，整个假期就是吃、喝、玩、乐。书不仅一页未读，甚至把节前看的还回去了一多半。&lt;/p&gt;
&lt;p&gt;好在做笔记就这点好处，你可以快速的回顾一遍之前的重点。&lt;/p&gt;
&lt;p&gt;人老了，记
    
    </summary>
    
    
      <category term="杂项" scheme="http://yoursite.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>17. Two-Pane Master-Detail Interfaces</title>
    <link href="http://yoursite.com/2016/09/27/17-Two-Pane-Master-Detail-Interfaces/"/>
    <id>http://yoursite.com/2016/09/27/17-Two-Pane-Master-Detail-Interfaces/</id>
    <published>2016-09-27T08:11:33.000Z</published>
    <updated>2016-10-08T04:31:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天的最后一章，这章应该蛮有意思，但是应该只是展示了用fragment的好处。也就一并看了。</p>
<p>别名，这样相同的R.layout.XXXXX对于不同的环境就能inflate出不同layout.xml了。</p>
<p>refs.xml，用以前的 <code>activity_fragment</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    &lt;item name=&quot;activity_masterdetail&quot; type=&quot;layout&quot;&gt;@layout/activity_fragment&lt;/item&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p>refs.xml(sw600dp)，用pad的 <code>activity_twopane</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    &lt;item name=&quot;activity_masterdetail&quot; type=&quot;layout&quot;&gt;@layout/activity_twopane&lt;/item&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p>在Fragment里声明Callbacks接口，Activity实现Callbacks接口，然后由Fragment产生的事件通过Callbacks让Activity负责调度处理。</p>
<p>在CrimeListFragment中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onAttach(Activity activity) &#123;</div><div class="line">    super.onAttach(activity);</div><div class="line">    mCallbacks = (Callbacks) activity;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onDetach() &#123;</div><div class="line">    super.onDetach();</div><div class="line">    mCallbacks = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CrimeListFragment点了哪个row -&gt; Callbacks -&gt; Activity -&gt; 显示相应的CrimeFragment<br>CrimeFragment修改crime信息 -&gt; Callbacks -&gt; Activity -&gt; 更新CrimeListFragment中对应的row</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天的最后一章，这章应该蛮有意思，但是应该只是展示了用fragment的好处。也就一并看了。&lt;/p&gt;
&lt;p&gt;别名，这样相同的R.layout.XXXXX对于不同的环境就能inflate出不同layout.xml了。&lt;/p&gt;
&lt;p&gt;refs.xml，用以前的 &lt;code&gt;ac
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>16. Taking Pictures with Intents</title>
    <link href="http://yoursite.com/2016/09/27/16-Taking-Pictures-with-Intents/"/>
    <id>http://yoursite.com/2016/09/27/16-Taking-Pictures-with-Intents/</id>
    <published>2016-09-27T07:43:36.000Z</published>
    <updated>2016-09-27T08:11:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>还是这样，这些具体的技巧，等到用的时候再详细了解也不迟，所以今天一天就多过几章。好读，不求甚解了。</p>
<p>layout文件的include引入</p>
<font color="Green"><br>    <code>&lt;include layout=&quot;@layout/view_camera_and_title&quot; /&gt;</code><br></font>


<p>照相机的隐式Intent：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Intent(MediaStore.ACTION_IMAGE_CAPTURE)</div></pre></td></tr></table></figure>
<p>权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</div><div class="line">                 android:maxSdkVersion=&quot;18&quot;</div><div class="line">    /&gt;</div></pre></td></tr></table></figure>
<p>这里有个复杂的Bitmap处理，完全没有理解 ~~~ 擦。简言之，就是用 <code>BitmapFactory</code> 把图片压缩成bitmap适合的大小，当然根据屏幕猜测了下bitmap的大小。</p>
<p>目的主要是保证bitmap不要过大，占据太多内存。所以估算的也可用吧。（软件做了差值？）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;uses-feature android:name=&quot;android.hardware.camera&quot;</div><div class="line">              android:required=&quot;false&quot;</div><div class="line">    /&gt;</div></pre></td></tr></table></figure>
<p>其中 <code>android:required</code> 如果为 <code>true</code> 的话，在google play商店中，没有拍照功能的硬件就安装不了此应用。</p>
<font color="Green"><br>ViewTreeObserver<br><br>OnGlobalLayoutListener可以监听布局的传递、控制事件的发生<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还是这样，这些具体的技巧，等到用的时候再详细了解也不迟，所以今天一天就多过几章。好读，不求甚解了。&lt;/p&gt;
&lt;p&gt;layout文件的include引入&lt;/p&gt;
&lt;font color=&quot;Green&quot;&gt;&lt;br&gt;    &lt;code&gt;&amp;lt;include layout=&amp;quo
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>15. Implicit Intents</title>
    <link href="http://yoursite.com/2016/09/27/15-Implicit-Intents/"/>
    <id>http://yoursite.com/2016/09/27/15-Implicit-Intents/</id>
    <published>2016-09-27T04:20:41.000Z</published>
    <updated>2016-10-08T04:29:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>好吧，不得不说这章其实意义也不大。对于本章来说，知道可以干什么，远比怎么干重要，因为怎么干并不复杂，在用到的时候去了解就哦了 ~</p>
<font color="Green"><br><strong>跳转网页</strong>：<code>Intent.ACTION_VIEW，URL</code><br><br><strong>发消息</strong>：有若干可选的activity都可以干发送消息这件事，eg，sms，邮件，微信。<code>Intent.ACTION_SEND，EXTRA_TEXT，EXTRA_SUBJECT</code><br><br><strong>设置每次都要选</strong>：Intent.createChooser(…)<br><br><strong>获取联系人</strong>：Intent.ACTION_PICK，ContactsContract.Contacts.CONTENT_URI<br><br>通过<code>ContentResolver</code>访问<code>ContentProvider</code><br><br><strong>检查是否有可响应的Activity</strong>：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">final Intent pickContact = new Intent(Intent.ACTION_PICK,</div><div class="line">                ContactsContract.Contacts.CONTENT_URI);</div></pre></td></tr></table></figure><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PackageManager packageManager = getActivity().getPackageManager();</div><div class="line">   if (packageManager.resolveActivity(pickContact,</div><div class="line">           PackageManager.MATCH_DEFAULT_ONLY) == null) &#123;</div><div class="line">       mSuspectButton.setEnabled(false);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><br><br>模拟一个PackageManager找不到适当Activity的情况pickContact.addCategory(Intent.CATEGORY_HOME);<br><br><strong>打电话</strong>：Intent.ACTION_DIAL,Intent.ACTION_CALL<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好吧，不得不说这章其实意义也不大。对于本章来说，知道可以干什么，远比怎么干重要，因为怎么干并不复杂，在用到的时候去了解就哦了 ~&lt;/p&gt;
&lt;font color=&quot;Green&quot;&gt;&lt;br&gt;&lt;strong&gt;跳转网页&lt;/strong&gt;：&lt;code&gt;Intent.ACTION_VI
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>我们android app杂七杂八</title>
    <link href="http://yoursite.com/2016/09/26/%E6%88%91%E4%BB%ACandroid-app%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    <id>http://yoursite.com/2016/09/26/我们android-app杂七杂八/</id>
    <published>2016-09-26T06:22:04.000Z</published>
    <updated>2016-09-26T10:54:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="com-jfrog-bintray-gradle-gradle-bintray-plugin-1-1"><a href="#com-jfrog-bintray-gradle-gradle-bintray-plugin-1-1" class="headerlink" title="com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1"></a>com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1</h1><p>首先说jCenter，是一个代码库，相当于一个公共的存储控件，简单的来讲就是你把你写好的aar文件及一些文档描述文件之类的东西打包上传到jCenter服务器上，其他人就可以通过jCenter服务器下载到你上传的包了。</p>
<p>那Bintray又是啥？Bintray是jCenter的提供商，他支持上传lib到多个平台，jCenter只是众多平台中的一个，形象的说jCenter是位于某地的仓库，Bintray是送货的卡车，你写的库就是货了。</p>
<h1 id="com-github-dcendents-android-maven-gradle-plugin-1-3"><a href="#com-github-dcendents-android-maven-gradle-plugin-1-3" class="headerlink" title="com.github.dcendents:android-maven-gradle-plugin:1.3"></a>com.github.dcendents:android-maven-gradle-plugin:1.3</h1><p>这个东东也是为了把自己的库上传到jCenter的。</p>
<hr>
<h1 id="良师通"><a href="#良师通" class="headerlink" title="良师通"></a>良师通</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">|- app</div><div class="line">|</div><div class="line">|- androidlib</div><div class="line">|</div><div class="line">|- UniversalVideoView</div><div class="line">|</div><div class="line">|- android-pdf-viewer</div></pre></td></tr></table></figure>
<p><strong>UniversalVideoView</strong>：<a href="https://github.com/linsea/UniversalVideoView" target="_blank" rel="external">https://github.com/linsea/UniversalVideoView</a></p>
<p>我们是源码引入，然后在其上修改的。 <code>东西不多 2k LOC，应该定义好了接口，自己实现更好的video player，将来总会用到</code></p>
<p><strong>android-pdf-viewer</strong>：<a href="https://github.com/barteksc/AndroidPdfViewer" target="_blank" rel="external">https://github.com/barteksc/AndroidPdfViewer</a></p>
<p>这个也是源码引入，有修改么？ <code>库挺庞大，如果需要修改，除了源码引入然后修改，有没有什么更好的方法</code></p>
<h2 id="app"><a href="#app" class="headerlink" title="app"></a>app</h2><p><strong>isoparser</strong>：MP4剪切、合并库，当时有个crash bug，换成最新版本 <code>isoparser-1.1.21.jar</code> 后解决</p>
<p><strong>litepal</strong>：ORM(object/rational mapping)，《第一行代码Android》的作者”郭霖”有一系列不错的Blog介绍：<a href="http://blog.csdn.net/sinyu890807/article/details/38083103" target="_blank" rel="external">Android数据库高手秘籍</a></p>
<p><strong>zxing</strong>：<a href="https://github.com/zxing/zxing" target="_blank" rel="external">https://github.com/zxing/zxing</a> 二维码识别，这个原生的就是java库。</p>
<p><strong>recyclerview</strong>：com.android.support:recyclerview-v7</p>
<p><strong>design</strong>：com.android.support:design，<code>Material design</code> 这个厉害了。一句话就是一些NB的效果，google一起都给放进来了：</p>
<ul>
<li><code>TextInputLayout</code>：方便的显示错误提示，etc？</li>
<li><code>FloatingActionButton</code>：字面意思，好像是浮在view上的？</li>
<li><code>Snackbar</code>：用户快速feedback？</li>
<li><code>TabLayout</code>：左右滑动，topscroll / bottomscroll配合，pager?</li>
<li><code>NavigationView</code>：左滑的drawer view？</li>
<li><code>CoordinatorLayout</code>：view能完成一些自动的动画，到需要的位置？</li>
<li><code>CollapsingToolbarLayout</code>：上滑下滑时，header view跟随zooming</li>
</ul>
<p><strong>percent</strong>：com.android.support:percent，百分比布局，可设置高度占父控件高度的百分比，宽度占父控件的百分比，etc</p>
<p><strong>nineoldandroids</strong>：com.nineoldandroids:library，android的一个三方动画库，《Android开发艺术探索》作者 <code>任玉刚</code> 的<a href="http://blog.csdn.net/singwhatiwanna/article/details/17639987" target="_blank" rel="external">一篇Blog</a></p>
<h2 id="androidlib"><a href="#androidlib" class="headerlink" title="androidlib"></a>androidlib</h2><p><strong>com.android.support:appcompat-v7</strong>：<font color="Red">这里有个疑问，androidlib里依赖的appcompat，和UniversalVideoView里依赖的appcompat版本居然不一样，这会怎么样？引入两份，加大体积？换成一样的呢？</font></p>
<p><strong>okhttputils, okio</strong>：square的网络框架，我们用retrofit + okhttp。这个okhttputils为 <code>鸿洋</code> <a href="http://blog.csdn.net/lmj623565791" target="_blank" rel="external">Blog</a> 在okhttp之上做了一层封装，我们应该不会用，但是既然能做封装，应该对okhttp有一定了解，blog上原创又很多，留着看看。</p>
<p><strong>glide</strong>：google推荐的图形库，我们用facebook的Fresco</p>
<p><strong>otto</strong>：系统级notification，我们用event-bus</p>
<p><strong>fastjson</strong>：这个是阿里开源的，我们还是用 <code>gson</code> 吧，出自google，倒不是崇洋媚外，也可能阿里的fastjson确实fast，但是强烈不喜欢丫的自己吹NB，说别人的为“龟速”</p>
<p><strong>GifView</strong>：<a href="https://github.com/Cutta/GifView" target="_blank" rel="external">https://github.com/Cutta/GifView</a></p>
<h1 id="易学易练"><a href="#易学易练" class="headerlink" title="易学易练"></a>易学易练</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">|- MainApp</div><div class="line">|</div><div class="line">|- YanxiuBaseCore</div><div class="line">|</div><div class="line">|- CommonCoreLib</div><div class="line">|</div><div class="line">|- LoginCommonLibs</div><div class="line">|</div><div class="line">|- ShareCommonLibs</div><div class="line">|</div><div class="line">|- YanxiuUpgradeLib</div></pre></td></tr></table></figure>
<h2 id="MainApp"><a href="#MainApp" class="headerlink" title="MainApp"></a>MainApp</h2><h2 id="YanxiuBaseCore"><a href="#YanxiuBaseCore" class="headerlink" title="YanxiuBaseCore"></a>YanxiuBaseCore</h2><p><strong>fastjson</strong></p>
<p><strong>volley</strong>：google的网络框架</p>
<p><strong>com.android.support:appcompat-v7</strong></p>
<h2 id="CommonCoreLib"><a href="#CommonCoreLib" class="headerlink" title="CommonCoreLib"></a>CommonCoreLib</h2><p><strong>cardview</strong>：com.android.support:cardview-v7，又一种布局<a href="http://www.kancloud.cn/digest/fastdev4android/109671" target="_blank" rel="external">Blog</a>，没细看</p>
<p><strong>com.zhy:percent-support-extends</strong>：a extends lib for android-percent-support(Google百分比布局库的扩展)，这个<a href="https://github.com/hongyangAndroid/android-percent-support-extend" target="_blank" rel="external">hongyangAndroid</a>经常能见到。</p>
<p><strong>eventbus</strong>：<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">https://github.com/greenrobot/EventBus</a></p>
<p><strong>scalpel</strong>：A surgical debugging tool to uncover the layers under your app. <a href="https://github.com/JakeWharton/scalpel" target="_blank" rel="external">https://github.com/JakeWharton/scalpel</a></p>
<p><strong>Android-Universal-Image-Loader</strong>：<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">这个</a>恐怕可以用Fresco来替代了，虽然这家伙的stars好多好多！</p>
<h2 id="LoginCommonLibs"><a href="#LoginCommonLibs" class="headerlink" title="LoginCommonLibs"></a>LoginCommonLibs</h2><h2 id="ShareCommonLibs"><a href="#ShareCommonLibs" class="headerlink" title="ShareCommonLibs"></a>ShareCommonLibs</h2><h2 id="YanxiuUpgradeLib"><a href="#YanxiuUpgradeLib" class="headerlink" title="YanxiuUpgradeLib"></a>YanxiuUpgradeLib</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;com-jfrog-bintray-gradle-gradle-bintray-plugin-1-1&quot;&gt;&lt;a href=&quot;#com-jfrog-bintray-gradle-gradle-bintray-plugin-1-1&quot; class=&quot;headerlink&quot;
    
    </summary>
    
      <category term="杂项" scheme="http://yoursite.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>14. SQLite Database</title>
    <link href="http://yoursite.com/2016/09/26/14-SQLite-Database/"/>
    <id>http://yoursite.com/2016/09/26/14-SQLite-Database/</id>
    <published>2016-09-26T03:51:39.000Z</published>
    <updated>2016-09-26T04:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ORM (object/rational mapping)</strong> : litepal / greenDao</p>
<font color="Green"><br>getApplictionContext()<br><br>SQLiteOpenHelper<br>- onCreate<br>- onUpgrade<br><br>CursorWrapper<br><br></font>

<font color="Orange"><br>SQL语句中用 <code>&quot; = ?&quot;, XXXXX</code>，可以防止SQL脚本注入<br></font>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ORM (object/rational mapping)&lt;/strong&gt; : litepal / greenDao&lt;/p&gt;
&lt;font color=&quot;Green&quot;&gt;&lt;br&gt;getApplictionContext()&lt;br&gt;&lt;br&gt;SQLiteOpenH
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>13. The Toolbar</title>
    <link href="http://yoursite.com/2016/09/25/13-The-Toolbar/"/>
    <id>http://yoursite.com/2016/09/25/13-The-Toolbar/</id>
    <published>2016-09-25T14:17:27.000Z</published>
    <updated>2016-10-08T04:25:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>说实话，感觉这章用处不大，所以看过书了之后，脑子里再过一遍。就没有再去码砖。</p>
<font color="Green"><br>AppCompatActivity<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;plurals name=&quot;subtitle_plural&quot;&gt;</div><div class="line">	&lt;item quantity=&quot;one&quot;&gt;%1$s crime&lt;/item&gt;</div><div class="line">	&lt;item quantity=&quot;other&quot;&gt;%1$s crimes&lt;/item&gt;</div><div class="line">&lt;/plurals&gt;</div></pre></td></tr></table></figure><br><br>getResources().getQuantityString(R.plurals.subtitle_plural, crimeSize, crimeSize);<br></font>

<p>说实话，确实不太理解，android转个屏幕还要考虑那么多需要save的东西，不过想想ios上旋转屏幕的处理部分，也是相当相当麻烦的啊</p>
<p>好吧，实际上这章真的是粗略的一看，下面证据 <code>在我们的android工程中搜索onCreateOptionsMenu，找到0个匹配</code> 基本证明了我的想法，现实App中应该不会用到系统的这个难用的Toolbar，这样多少让我心情好了一些，等真正用到的时候再好好研究下，至少这块现在不是重点！ </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说实话，感觉这章用处不大，所以看过书了之后，脑子里再过一遍。就没有再去码砖。&lt;/p&gt;
&lt;font color=&quot;Green&quot;&gt;&lt;br&gt;AppCompatActivity&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>12. Dialogs</title>
    <link href="http://yoursite.com/2016/09/24/12-Dialogs/"/>
    <id>http://yoursite.com/2016/09/24/12-Dialogs/</id>
    <published>2016-09-24T11:48:26.000Z</published>
    <updated>2016-09-24T15:34:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>DialogFragment</p>
<p>AlertDialog</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@NonNull</div><div class="line">@Override</div><div class="line">public Dialog onCreateDialog(Bundle savedInstanceState) &#123;</div><div class="line">    return new AlertDialog.Builder(getActivity())</div><div class="line">            .setTitle(&quot;Title&quot;)</div><div class="line">            .setPositiveButton(&quot;Ok&quot;, null)</div><div class="line">            .create();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	FragmentManager fm = getFragmentManager();</div><div class="line">    DataPickerFragment dialog = new DataPickerFragment();</div><div class="line">    dialog.show(fm, TAG_DIALOG_DATE_PICKER);</div><div class="line">`</div></pre></td></tr></table></figure>
<p>Calendar组件用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Calendar c = Calendar.getInstance();</div><div class="line">      c.setTime(date);</div><div class="line">      int year = c.get(Calendar.YEAR);</div><div class="line">      int month = c.get(Calendar.MONTH);</div><div class="line">      int day = c.get(Calendar.DAY_OF_MONTH);</div></pre></td></tr></table></figure>
<p>同Activity下 fragmentA 获取从 fragmentB 的返回值，需要设置fragmentA为target</p>
<p> <code>setTargetFragment(...)</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FragmentManager fm = getFragmentManager();</div><div class="line">   DataPickerFragment dialog = DataPickerFragment.newInstance(mCrime.getmDate());</div><div class="line">   dialog.setTargetFragment(CrimeFragment.this, REQUEST_CODE_DATE);</div><div class="line">   dialog.show(fm, TAG_DIALOG_DATE_PICKER);</div></pre></td></tr></table></figure>
 <font color="Blue"><br> 父activity接收到Activity.onActivityResult(…)方法调用后，其FragmentManager会调用对应fragment的Fragment.onActivityResult(…)方法<br> </font>

<p> <code>.setPositiveButton(&quot;Ok&quot;, new DialogInterface.OnClickListener(){ ... }</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">return new AlertDialog.Builder(getActivity())</div><div class="line">         .setView(v)</div><div class="line">         .setTitle(&quot;Title&quot;)</div><div class="line">         .setPositiveButton(&quot;Ok&quot;, new DialogInterface.OnClickListener() &#123;</div><div class="line">             @Override</div><div class="line">             public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                 int year = mDatePicker.getYear();</div><div class="line">                 int month = mDatePicker.getMonth();</div><div class="line">                 int day = mDatePicker.getDayOfMonth();</div><div class="line">                 Date date = new GregorianCalendar(year, month, day).getTime();</div><div class="line"></div><div class="line">                 getTargetFragment().onActivityResult(getTargetRequestCode(), Activity.RESULT_OK, newOutIntent(date));</div><div class="line">             &#125;</div><div class="line">         &#125;)</div><div class="line">         .create();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DialogFragment&lt;/p&gt;
&lt;p&gt;AlertDialog&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cl
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>11. Using ViewPager</title>
    <link href="http://yoursite.com/2016/09/23/11-Using-ViewPager/"/>
    <id>http://yoursite.com/2016/09/23/11-Using-ViewPager/</id>
    <published>2016-09-23T02:16:32.000Z</published>
    <updated>2016-10-08T04:14:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>人被掏空的感觉啊 ~~~</p>
<p>今天的ViewPager又是重点，而且目测这周六、日的章节也都是重点章节。不过顶过这周应该就好很多了。话说工作日基本有稳定的输出，反而周六、日比较担心，还得伺候老的小的，偶尔还约着caib们打打sc。</p>
<p>言归正传</p>
<p>如同CrimeActivity，CrimePagerActivity为了接收传入param，也需要定义类似的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Intent newIntent(Context packageContext, UUID cid) &#123;</div><div class="line">       Intent intent = new Intent(packageContext, CrimePagerActivity.class);</div><div class="line">       intent.putExtra(EXTRA_CRIME_ID, cid);</div><div class="line">       return intent;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<font color="Orange"><br>由于斟酌了intent的key的所属，为private static final，所以两个Activity都用了相同的key值<br></font>

<font color="Green"><br>关于ViewPager只需要记住如下方法即可，特别注意new FragmentStatePagerAdapter构造函数需要传入FragmentMananer实例 <code>fm</code><br></font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mViewPager.setAdapter(new FragmentStatePagerAdapter(fm) &#123;</div><div class="line">    @Override</div><div class="line">    public Fragment getItem(int position) &#123;</div><div class="line">        UUID cid = mCrimes.get(position).getmId();</div><div class="line">        return CrimeFragment.newInstance(cid);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getCount() &#123;</div><div class="line">        return mCrimes.size();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong> FragmentStatePagerAdapter </strong> : 对于不用的fragment，调用remove(Fragment)方法，用onSaveInstanceState(Bundle)来存储并恢复</p>
<p><strong> FragmentPagerAdapter </strong> : 对于不用的fragment, 调用detach(Fragment)方法，只销毁了fragment视图，fragment实例还保留在FragmentManager中。</p>
<font color="Orange"><br>可以以代码方式创建布局<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ViewPager vp = new ViewPager(this);</div><div class="line">setContentView(vp);</div></pre></td></tr></table></figure><br><br>但是google并不推荐，所以不要怕麻烦，写个xml布局文件<br></font>

<font color="Red"><br>再次说明了命名相当重要<br><br># 1. Java文件命名<br><br>SingleFragmentActivity<br><br>- CrimeListActivity<br><br>    CrimeListFragment<br><br>- CrimeActivity<br><br>    CrimeFragment<br><br>- CrimePagerActivity<br><br>    CrimeFragment<br><br><br># 2. Layout文件命名<br><br><strong>activity_fragment</strong> 对应 <code>SingleFragmentActivity</code><br><br>由于 <code>CrimeListActivity</code> 继承自 <code>SingleFragmentActivity</code>，所以没有对应的layout.xml<br><br><strong>fragment_crime_list</strong> 对应 <code>CrimeListFragment</code><br><br><strong>activity_crime_pager</strong> 对应 <code>CrimePagerActivity</code><br><br>由于 <code>CrimeActivity</code> 继承自 <code>SingleFragmentActivity</code>，所以没有对应的layout.xml<br><br><strong>fragment_crime</strong> 对应 <code>CrimeFragment</code><br><br><strong>list_item_crime.xml</strong> 对应tableview中的一个cell<br><br># 3. @id命名<br><br><strong>activity_fragment</strong>里：<font color="Green">@+id/fragment_container</font>

<p><strong>fragment_crime_list</strong>里：<font color="Green">@+id/crime_recycler_view</font></p>
<p><strong>activity_crime_pager</strong>里：<font color="Green">@+id/activity_crime_pager_view_pager</font></p>
<p><strong>fragment_crime</strong>里：<font color="Green">@+id/crime_title 和 @+id/crime_date 和 @+id/crime_solved</font></p>
<p><strong>list_item_crime.xml</strong>里：<font color="Green">@+id/list_item_crime_solved_check_box 和 @+id/list_item_crime_title_text_view 和 @+id/list_item_crime_date_text_view</font></p>
<h1 id="4-intent传入参数key值"><a href="#4-intent传入参数key值" class="headerlink" title="4. intent传入参数key值"></a>4. intent传入参数key值</h1><p>在 <code>CrimeActivity</code> 里：(EXTRA_IN_XXXXX)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXTRA_IN_CRIME_ID = &quot;extra.in.crime.id&quot;;</div></pre></td></tr></table></figure>
<h1 id="5-activity传入参数用的newIntent-…-静态方法"><a href="#5-activity传入参数用的newIntent-…-静态方法" class="headerlink" title="5. activity传入参数用的newIntent(…)静态方法"></a>5. activity传入参数用的newIntent(…)静态方法</h1><p>在 <code>CrimeActivity</code> 里：(newInIntent(…))</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Intent newInIntent(Context packageContext, UUID crimeId) &#123;</div><div class="line">    Intent intent = new Intent(packageContext, CrimeActivity.class);</div><div class="line">    intent.putExtra(EXTRA_IN_CRIME_ID, crimeId);</div><div class="line">    return intent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="6-bundle传入参数key值"><a href="#6-bundle传入参数key值" class="headerlink" title="6. bundle传入参数key值"></a>6. bundle传入参数key值</h1><p>在 <code>CrimeFragment</code> 里：(BUNDLE_IN_XXXXX)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BUNDLE_IN_CRIME_ID = &quot;bundle.in.crime.id&quot;;</div></pre></td></tr></table></figure>
<h1 id="7-fragment传入参数用的newInstance-…-静态方法"><a href="#7-fragment传入参数用的newInstance-…-静态方法" class="headerlink" title="7. fragment传入参数用的newInstance(…)静态方法"></a>7. fragment传入参数用的newInstance(…)静态方法</h1><p>在 <code>CrimeFragment</code> 里：(newInstance(…))</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static CrimeFragment newInstance(UUID crimeId) &#123;</div><div class="line">    Bundle args = new Bundle();</div><div class="line">    args.putSerializable(BUNDLE_IN_CRIME_ID, crimeId);</div><div class="line"></div><div class="line">    CrimeFragment fragment = new CrimeFragment();</div><div class="line">    fragment.setArguments(args);</div><div class="line">    return fragment;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后在 <code>CrimeFragment</code> 里获取</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UUID cid = (UUID)getArguments().getSerializable(BUNDLE_IN_CRIME_ID);</div></pre></td></tr></table></figure>
<h1 id="8-activity-调用方-接收返回值时用的-int-requestCode"><a href="#8-activity-调用方-接收返回值时用的-int-requestCode" class="headerlink" title="8. activity 调用方 接收返回值时用的 int requestCode"></a>8. activity 调用方 接收返回值时用的 int requestCode</h1><p>在 <code>CrimeListFragment</code> 里：(REQUEST_CODE_XXXXX)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static final int REQUEST_CODE_CRIME_TITLE = 0;</div></pre></td></tr></table></figure>
<p>在接收方 <code>CrimeListFragment</code> 里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">       super.onActivityResult(requestCode, resultCode, data);</div><div class="line">       if (resultCode == Activity.RESULT_CANCELED) &#123;</div><div class="line">           return;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       if (requestCode == REQUEST_CODE_CRIME_TITLE) &#123;</div><div class="line">           String s = CrimeActivity.crimeTitleFromOutIntent(data);</div><div class="line">           Log.e(&quot;CrimeListFragment&quot;, s);</div><div class="line">       &#125;</div><div class="line">       mAdapter.notifyDataSetChanged();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h1 id="9-activity-被调用方-返回值intent里的参数的key"><a href="#9-activity-被调用方-返回值intent里的参数的key" class="headerlink" title="9. activity 被调用方 返回值intent里的参数的key"></a>9. activity 被调用方 返回值intent里的参数的key</h1><p>在 <code>CrimeActivity</code> 里：(EXTRA_OUT_XXXXX)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static final String EXTRA_OUT_CRIME_TITLE = &quot;extra.out.crime.title&quot;;</div></pre></td></tr></table></figure>
<h1 id="10-activity-被调用方-生成返回值的newIntent-…-静态方法"><a href="#10-activity-被调用方-生成返回值的newIntent-…-静态方法" class="headerlink" title="10. activity 被调用方 生成返回值的newIntent(…)静态方法"></a>10. activity 被调用方 生成返回值的newIntent(…)静态方法</h1><p>在 <code>CrimeActivity</code> 里：(newOutIntent(…))</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Intent newOutIntent(String s) &#123;</div><div class="line">    Intent intent = new Intent();</div><div class="line">    intent.putExtra(EXTRA_OUT_CRIME_TITLE, s);</div><div class="line">    return intent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="11-activity-被调用方-帮助解析返回Intent-…-静态方法"><a href="#11-activity-被调用方-帮助解析返回Intent-…-静态方法" class="headerlink" title="11. activity 被调用方 帮助解析返回Intent(…)静态方法"></a>11. activity 被调用方 帮助解析返回Intent(…)静态方法</h1><p>在 <code>CrimeActivity</code> 里：(xxxxxFromOutIntent(…))</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static String crimeTitleFromOutIntent(Intent intent) &#123;</div><div class="line">       return intent.getStringExtra(EXTRA_OUT_XXXXX);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p></p></font><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人被掏空的感觉啊 ~~~&lt;/p&gt;
&lt;p&gt;今天的ViewPager又是重点，而且目测这周六、日的章节也都是重点章节。不过顶过这周应该就好很多了。话说工作日基本有稳定的输出，反而周六、日比较担心，还得伺候老的小的，偶尔还约着caib们打打sc。&lt;/p&gt;
&lt;p&gt;言归正传&lt;/p&gt;

    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>10. Using Fragment Arguments</title>
    <link href="http://yoursite.com/2016/09/22/10-Using-Fragment-Arguments/"/>
    <id>http://yoursite.com/2016/09/22/10-Using-Fragment-Arguments/</id>
    <published>2016-09-22T06:37:50.000Z</published>
    <updated>2016-10-08T03:59:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>由 CrimeListFragment 加载 CrimeActivity，并接受return值</p>
<h1 id="在CrimeListFragment里"><a href="#在CrimeListFragment里" class="headerlink" title="在CrimeListFragment里"></a>在CrimeListFragment里</h1><h2 id="处理return相关"><a href="#处理return相关" class="headerlink" title="处理return相关"></a>处理return相关</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static final int REQUEST_CRIME_ACTIVITY_CODE = 0;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">       super.onActivityResult(requestCode, resultCode, data);</div><div class="line">       if (resultCode == Activity.RESULT_CANCELED) &#123;</div><div class="line">           return;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       if (requestCode == REQUEST_CRIME_ACTIVITY_CODE) &#123;</div><div class="line">           String s = CrimeActivity.returnString(data);</div><div class="line">           Log.e(&quot;CrimeListFragment&quot;, s);</div><div class="line">       &#125;</div><div class="line">       mAdapter.notifyDataSetChanged();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivityForResult(intent, REQUEST_CRIME_ACTIVITY_CODE);</div></pre></td></tr></table></figure>
<h2 id="intent参数"><a href="#intent参数" class="headerlink" title="intent参数"></a>intent参数</h2><p>从CrimeActivity来构建Intent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Intent intent = CrimeActivity.newIntent(getActivity(), data.getmId());</div></pre></td></tr></table></figure>
<h1 id="在CrimeActivity里"><a href="#在CrimeActivity里" class="headerlink" title="在CrimeActivity里"></a>在CrimeActivity里</h1><h2 id="帮助处理返回"><a href="#帮助处理返回" class="headerlink" title="帮助处理返回"></a>帮助处理返回</h2><p>在CrimeListFragment.onActivityResult获取result用到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static String returnString(Intent intent) &#123;</div><div class="line">       return intent.getStringExtra(RETURN_STRING);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="帮助构建Intent参数"><a href="#帮助构建Intent参数" class="headerlink" title="帮助构建Intent参数"></a>帮助构建Intent参数</h2><p>在CrimeListFragment需要 <code>startActivityForResult(intent, REQUEST_CRIME_ACTIVITY_CODE);</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Intent newIntent(Context packageContext, UUID cid) &#123;</div><div class="line">    Intent intent = new Intent(packageContext, CrimeActivity.class);</div><div class="line">    intent.putExtra(EXTRA_CRIME_ID, cid);</div><div class="line">    return intent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="CrimeFragment托管于CrimeActivity"><a href="#CrimeFragment托管于CrimeActivity" class="headerlink" title="CrimeFragment托管于CrimeActivity"></a>CrimeFragment托管于CrimeActivity</h1><h2 id="在CrimeActivity里-1"><a href="#在CrimeActivity里-1" class="headerlink" title="在CrimeActivity里"></a>在CrimeActivity里</h2><font color="Green"><br>要附加argument bundle给fragment，需要调用Fragment.setArguments(Bundle)方法。必须在fragment创建后、添加给activity前完成。<br><br>惯用newInstance(…)静态构造。如此之常用以至于接下来的CrimeFragment里有代码片段，在输入newInstance后直接补Bundle的构建和arguments的设置<br></font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected Fragment createFragment() &#123;</div><div class="line">       UUID crimeId = (UUID) getIntent()</div><div class="line">               .getSerializableExtra(EXTRA_CRIME_ID);</div><div class="line">       return CrimeFragment.newInstance(crimeId);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="在CrimeFragment里"><a href="#在CrimeFragment里" class="headerlink" title="在CrimeFragment里"></a>在CrimeFragment里</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static CrimeFragment newInstance(UUID crimeId) &#123;</div><div class="line">    Bundle args = new Bundle();</div><div class="line">    args.putSerializable(ARG_CRIME_ID, crimeId);</div><div class="line"></div><div class="line">    CrimeFragment fragment = new CrimeFragment();</div><div class="line">    fragment.setArguments(args);</div><div class="line">    return fragment;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传入fragment的args在 <code>onCreate()</code> 中获取， <code>UUID crimeId = (UUID) getArguments().getSerializable(ARG_CRIME_ID);</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    UUID crimeId = (UUID) getArguments().getSerializable(ARG_CRIME_ID);</div><div class="line">    mCrime = CrimeLab.get(getActivity()).getCrime(crimeId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在CrimeFragment里返回"><a href="#在CrimeFragment里返回" class="headerlink" title="在CrimeFragment里返回"></a>在CrimeFragment里返回</h2><p>fragment无setResult，所以只能用getActivity()来设置返回值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getActivity().setResult(Activity.RESULT_OK ,CrimeActivity.newReturnIntent(mCrime.getmTitle()));</div></pre></td></tr></table></figure>
<font color="Orange"><br>setResult(…)不能放在onPause()里，否则不起作用。<br><br>估计是生命期里onPause()以后getActivity()获取不到了吧？？？不确认<br></font>

<h1 id="开始吐槽"><a href="#开始吐槽" class="headerlink" title="开始吐槽"></a>开始吐槽</h1><p>这，来来回回的，相当的绕，ActivityA托管FragmentA，然后又要从FragmentA跳转到ActivityB，然后ActivityB又托管着FragmentB，所以ActivityB需要把从FragmentA传过来的参数，在FragmentB初始化时传入，当FragmentB完活儿后，还要有返回值给FragmentA，并且由于Fragment没有setResult()，所以只能调用ActivityB来设置返回值</p>
<p>然后由于这里return里intent的key理论上应该在Activity而不是Fragment中，所以还在ActivityB里多加了个 <code>public static Intent newReturnIntent(String s)</code></p>
<p>原因、结果代码都如下：</p>
<p>CrimeActivity里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private static final String RETURN_STRING = &quot;return string&quot;;</div><div class="line"></div><div class="line">public static String returnString(Intent intent) &#123;</div><div class="line">    return intent.getStringExtra(RETURN_STRING);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static Intent newReturnIntent(String s) &#123;</div><div class="line">    Intent intent = new Intent();</div><div class="line">    intent.putExtra(RETURN_STRING, s);</div><div class="line">    return intent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由 CrimeListFragment 加载 CrimeActivity，并接受return值&lt;/p&gt;
&lt;h1 id=&quot;在CrimeListFragment里&quot;&gt;&lt;a href=&quot;#在CrimeListFragment里&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>09. Displaying Lists with RecyclerView</title>
    <link href="http://yoursite.com/2016/09/21/09-Displaying-Lists-with-RecyclerView/"/>
    <id>http://yoursite.com/2016/09/21/09-Displaying-Lists-with-RecyclerView/</id>
    <published>2016-09-21T10:49:56.000Z</published>
    <updated>2016-09-22T05:44:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>先感慨下，再笔记。<br>2016.09.21早上7：00不到起床，直奔环保新房，原本想投资一个车位，经过一早上的勘查，基于以下原因，这一期的车位暂时不投资购买了。</p>
<ol>
<li>可预见的近几年内很难有机会过去住</li>
<li>宁可买个外地牌，也不太可能买新能源，也就不存在安装充电桩的问题</li>
<li>开盘的产权车位仅仅不到1/5，而且我家楼下居然没有，还要在地下走个小5分钟才能上楼</li>
<li>销售态度极其恶劣</li>
</ol>
<p>好吧这Blog主要记录android，上面只是留个备案，如果5年内，车位价格大涨，再次证明我眼光之差的话。我觉得我在退休前，依然还能有2到3次机会做出重大投资决定，到时候要坚定地吸取教训。</p>
<p>下午本不想去公司了，可是想想确实手头还有事情。帮新人review code，花费的时间远比我自己想的多。还要自己动脑想下大致的实现。结果一下午就过去了。</p>
<p>晚上真TM累，但是约定好的一章android还没有看！！！而且这章东西还挺多，如果说ios 60%以上都在和tableview打交道，那么recyclerview应该就是android里的tableview了。</p>
<p>所以，在放松的打了1小时3局SC后（这个纯属精神上需要放松、快感），依然开始看书，然后自己开始敲code，的确概念还是比较多的，看完书敲code远没有前几章来的行云流水，是不是忘记了还要再书里再查找。<font color="Red"><strong>不过这样强迫自己多记住一点的方法，我感觉进步是最快的</strong></font></p>
<p>然后android很不给力的有2个小坑，害我躺倒床上了，又起来两、三次验证自己的想法。最终搞定，满意睡去… …</p>
<h1 id="下面开始正文："><a href="#下面开始正文：" class="headerlink" title="下面开始正文："></a>下面开始正文：</h1><p>activity 托管 fragment 代码大同小异，放到abstract class中了。(实际就是给fragment_container找对fragment)</p>
<p>fragment里包含RecyclerView</p>
<font color="Orange"><br>android studio中输入是模糊匹配，所以要输入<code>android.support.v7.widget.RecyclerView</code>可以输入&lt; a v7 re，然后tab键，或enter键，或者上下再选一下就好了<br></font>

<font color="Green"><br>android.support.v7.widget.RecyclerView<br><br>RelativeLayout<br><br>android:layout_alignXXXXX    (ParentRight)<br><br>android:layout_toXXXXXof    (Left)<br><br>android:layout_XXXXX        (below)<br></font>

<p>对于每个cell，<code>list_item_crime.xml</code></p>
<p>对于fragment，<code>fragment_crime_list.xml</code></p>
<p>对于activity，继承自 <code>SingleFragmentActivity</code></p>
<h1 id="fragment"><a href="#fragment" class="headerlink" title="fragment"></a>fragment</h1><h2 id="为RecyclerView设置LayoutManager，布局用"><a href="#为RecyclerView设置LayoutManager，布局用" class="headerlink" title="为RecyclerView设置LayoutManager，布局用"></a>为RecyclerView设置LayoutManager，布局用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Nullable</div><div class="line">@Override</div><div class="line">public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">    View view = inflater.inflate(R.layout.fragment_crime_list, container, false);</div><div class="line">    mRecyclerView = (RecyclerView)view.findViewById(R.id.crime_recycler_view);</div><div class="line">    mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));</div><div class="line"></div><div class="line">    return view;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<font color="Green"><br>LinearLayoutManager 继承自-&gt; LayoutManager<br><br>GridLayoutManager 继承自-&gt; LayoutManager<br></font>

<h2 id="生成Adapter，并将其set给RecyclerView"><a href="#生成Adapter，并将其set给RecyclerView" class="headerlink" title="生成Adapter，并将其set给RecyclerView"></a>生成Adapter，并将其set给RecyclerView</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CrimeLab crimeLab = CrimeLab.get(getActivity());</div><div class="line">List&lt;Crime&gt; crimes = crimeLab.getCrimes();</div><div class="line"></div><div class="line">mAdapter = new CrimeAdapter(crimes);</div><div class="line">mCrimeRecyclerView.setAdapter(mAdapter);</div></pre></td></tr></table></figure>
<h1 id="ViewHolder"><a href="#ViewHolder" class="headerlink" title="ViewHolder"></a>ViewHolder</h1><h2 id="找到相应的UI-View，并bind数据和视图"><a href="#找到相应的UI-View，并bind数据和视图" class="headerlink" title="找到相应的UI View，并bind数据和视图"></a>找到相应的UI View，并bind数据和视图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public void bindData(Crime crime) &#123;</div><div class="line">          mCrime = crime;</div><div class="line">          mTitleTextView.setText(mCrime.getTitle());</div><div class="line">          mDateTextView.setText(mCrime.getDate().toString());</div><div class="line">          mSolvedCheckBox.setChecked(mCrime.isSolved());</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h1 id="Adaptor"><a href="#Adaptor" class="headerlink" title="Adaptor"></a>Adaptor</h1><h2 id="实现各个代理接口"><a href="#实现各个代理接口" class="headerlink" title="实现各个代理接口"></a>实现各个代理接口</h2><p>Adaptor的声明：<code>private class CrimeAdapter extends RecyclerView.Adapter&lt;CrimeHolder&gt;</code></p>
<p><code>public CrimeHolder onCreateViewHolder(ViewGroup parent, int viewType)</code> 取出cell对应的ViewHolder, ViewHolder负责cell的重用</p>
<p><code>public void onBindViewHolder(CrimeHolder holder, int position)</code> 对新的 or 重用的cell做数据绑定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">      public CrimeHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line">          LayoutInflater layoutInflater = LayoutInflater.from(getActivity());</div><div class="line">          View view = layoutInflater.inflate(R.layout.list_item_crime, parent, false);</div><div class="line">          return new CrimeHolder(view);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      @Override</div><div class="line">      public void onBindViewHolder(CrimeHolder holder, int position) &#123;</div><div class="line">          Crime crime = mCrimes.get(position);</div><div class="line">          holder.bindCrime(crime);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      @Override</div><div class="line">      public int getItemCount() &#123;</div><div class="line">          return mCrimes.size();</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h1 id="开始坑爹"><a href="#开始坑爹" class="headerlink" title="开始坑爹"></a>开始坑爹</h1><h2 id="cell的高度"><a href="#cell的高度" class="headerlink" title="cell的高度"></a>cell的高度</h2><p>自己猛敲了一通代码后，编译一次通过，觉得应该问题不大。运行后看到若干全屏的cell。看来</p>
<ol>
<li>模块整体没啥问题</li>
<li>遗漏的某些细节</li>
</ol>
<p>尝试解决如下：</p>
<ol>
<li>再次看书，回想每个细节 （貌似细节都注意了，也没有什么不对的啊）</li>
<li>仔细对比书上code和自己code中可能影响cell高度的代码，尤其是wrap_content, match_parent这种 （也没看出所以然）</li>
<li>躺着闭眼思考，貌似我这每个cell占了全屏啊？再看看代码 <code>list_item_crime.xml</code> 里 RelativeLayout宽高果然是match_parent，改成wrap_content，✌️，搞定。但我明明跟着随书code仔细的对过了啊，虽然文件、类、布局命名不同，但是这些细节我应该不至于漏掉。</li>
<li>再看随书代码，里面 <code>list_item_crime.xml</code> 里 RelativeLayout宽高局然也是match_parent！！！这，为啥，为啥，为啥。只能继续躺下思考，再过一遍流程。</li>
</ol>
<font color="Red"><br><strong>结论</strong><br><br>随书例子用的RecyclerView： <code>com.android.support:recyclerview-v7:22.1.0</code><br><br>而我用的：<code>com.android.support:recyclerview-v7:24.2.1</code><br><br></font>

<p>替换后果然正常了，当然最最正确的，复合逻辑的，还是应该把item_cell根布局设置为wrap_content</p>
<h2 id="多种不同类型的cell"><a href="#多种不同类型的cell" class="headerlink" title="多种不同类型的cell"></a>多种不同类型的cell</h2><p><code>public CrimeHolder onCreateViewHolder(ViewGroup parent, int viewType)</code> 中，第二个参数 <code>viewType</code> 引发了我的无限猜想。</p>
<p>感觉上应该是为了支持不同cell样式而用的。躺下思考，又脑补了一遍流程。能确定的：</p>
<ul>
<li>应该对不同的cell类型有不同的ViewHolder，所以应该有类似如下代码才对：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">switch (viewType) &#123;</div><div class="line">	case TypeA:</div><div class="line">		return new ViewHolderA(inflate出来A类型cell的view);</div><div class="line">		break;</div><div class="line">	case TypeB:</div><div class="line">		return new ViewHolderB(inflate出来B类型cell的view);</div><div class="line">		break;</div><div class="line">	... ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>但是list中每个item都可能有不同的类型Type，怎么区别那个item用哪个类型呢？</li>
</ul>
<p>想了半天觉得一定缺少什么东西，把item和类型信息告诉给adaptor，于是又起来上网search，哇哈，原来Adaptor还有个接口 <code>@Override public int getItemViewType(int position)</code> 针对item的position给出相应的type。</p>
<p>但是又有个问题想不通了，虽然 <code>onCreateViewHolder</code> 确实对每个 type (也就是list中每个item所需的type) 返回了不同的 ViewHolder。</p>
<p>但 <code>@Override public void onBindViewHolder(CrimeHolder holder, int position)</code> 还要根据不同的position，获得不同的type，然后决定第一个参数传入的是哪种 ViewHolder 再调用相应的方法？</p>
<p>所以，此处第一个参数不应该是特定的ViewHolder (此处为CrimeHolder) 而最好是ViewHolder的一个子类，但却是所有支持type的ViewHolder的父类，有一个需要继承的方法叫 <code>bindData(Object data)</code></p>
<p>目前能想到的也就是这样解决了。 </p>
<p>又想到一点： <strong>position 相当于 indexpath.row ，type相当于deque用到的identifier </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先感慨下，再笔记。&lt;br&gt;2016.09.21早上7：00不到起床，直奔环保新房，原本想投资一个车位，经过一早上的勘查，基于以下原因，这一期的车位暂时不投资购买了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可预见的近几年内很难有机会过去住&lt;/li&gt;
&lt;li&gt;宁可买个外地牌，也不太可能买新
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>08. Creating User Interfaces with Layouts and Widgets</title>
    <link href="http://yoursite.com/2016/09/20/08-Creating-User-Interfaces-with-Layouts-and-Widgets/"/>
    <id>http://yoursite.com/2016/09/20/08-Creating-User-Interfaces-with-Layouts-and-Widgets/</id>
    <published>2016-09-20T05:06:48.000Z</published>
    <updated>2016-09-20T06:00:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/AndroidProgramming/0801.png" alt=""></p>
<font color="Green"><br>CheckBox<br></font>

<h1 id="样式-style-amp-主题-theme"><a href="#样式-style-amp-主题-theme" class="headerlink" title="样式(style) &amp; 主题(theme)"></a>样式(style) &amp; 主题(theme)</h1><p>AndroidManifest.xml里设置Theme：</p>
<pre><code>android:theme=&quot;@style/AppTheme&quot;
</code></pre><p>values/styles.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</div><div class="line">       &lt;!-- Customize your theme here. --&gt;</div><div class="line">       &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</div><div class="line">       &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</div><div class="line">       &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</div><div class="line">   &lt;/style&gt;</div></pre></td></tr></table></figure>
<font color="Green"><br>CheckBox.setOnCheckedChangeListener(…)<br><br>- <strong>dp</strong> : 像素无关<br>- <strong>sp</strong> : 用于字体<br><br>以 <code>layout_</code> 开头的属性，都是和父组件相关的属性，它们会告诉父布局如何在内部安排自己的子元素。其余的都是和自身相关的属性。<br><br>- <strong>padding</strong> : 内边距<br>- <strong>margin</strong> : 外边距（所以为layout_xxxxxMargin）<br></font>

<p>Create Landscape Variation 创建了 <code>/main/res/layout-land</code> 路径及在其中的布局xml文件</p>
<font color="Green"><br>android:layout_weight<br></font>

<h1 id="layout-width与layout-weight配合"><a href="#layout-width与layout-weight配合" class="headerlink" title="layout_width与layout_weight配合"></a>layout_width与layout_weight配合</h1><ul>
<li>第一步先满足width</li>
</ul>
<p><img src="/images/AndroidProgramming/0802a.png" alt=""></p>
<ul>
<li>然后按照weight的比例分配extra space</li>
</ul>
<p>1:1</p>
<p><img src="/images/AndroidProgramming/0802b.png" alt=""></p>
<p>2:1</p>
<p><img src="/images/AndroidProgramming/0802c.png" alt=""></p>
<ul>
<li>如果需要总空间等分，则应让两个控件都 <code>layout_width=0</code></li>
</ul>
<p><img src="/images/AndroidProgramming/0802d.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/AndroidProgramming/0801.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;font color=&quot;Green&quot;&gt;&lt;br&gt;CheckBox&lt;br&gt;&lt;/font&gt;

&lt;h1 id=&quot;样式-style-amp-主题-theme&quot;&gt;&lt;a
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>07. UI Fragments and the Fragment Manager</title>
    <link href="http://yoursite.com/2016/09/19/07-UI-Fragments-and-the-Fragment-Manager/"/>
    <id>http://yoursite.com/2016/09/19/07-UI-Fragments-and-the-Fragment-Manager/</id>
    <published>2016-09-19T03:28:44.000Z</published>
    <updated>2016-09-19T06:45:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>fragment的生命周期方法是由托管activity调用的，而activity的生命周期方法由操作系统调用。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><font color="Green">Fragment</font></td>
<td>android.support.v4.app.Fragment</td>
</tr>
<tr>
<td><font color="Green">FragmentActivity</font></td>
<td>android.support.v4.app.Fragment.Activity</td>
</tr>
</tbody>
</table>
<p>File -&gt; Project Structure -&gt; app -&gt; Dependencies -&gt; Library Dependency</p>
<p>com.google.android:support-v4:r7</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CrimeActivity extends FragmentActivity</div></pre></td></tr></table></figure>
<font color="Green"><br>EditText<br><br>android:hint<br></font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                         Bundle savedInstanceState) &#123;</div><div class="line">    // Inflate the layout for this fragment</div><div class="line">    return inflater.inflate(R.layout.fragment_crime, container, false);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                         Bundle savedInstanceState) &#123;</div><div class="line">    // Inflate the layout for this fragment</div><div class="line">    View v = inflater.inflate(R.layout.fragment_crime, container, false);</div><div class="line">    mCrimeTitleEditText = (EditText)v.findViewById(R.id.et_crime_title);</div><div class="line">    mCrimeTitleEditText.addTextChangedListener(new TextWatcher() &#123;</div><div class="line">        @Override</div><div class="line">        public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</div><div class="line">            mCrime.setmTitle(s.toString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void afterTextChanged(Editable s) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    return v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：</p>
<p>Fragment生命期方法均为public</p>
<font color="Green"><br>inflater.inflate(R.layout.fragment_crime, container, false);<br><br>addTextChangedListener()<br></font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_crime);</div><div class="line"></div><div class="line">    FragmentManager fm = getSupportFragmentManager();</div><div class="line">    Fragment f = fm.findFragmentById(R.id.fragment_container);</div><div class="line">    if (f == null) &#123;</div><div class="line">        f = new CrimeFragment();</div><div class="line">        fm.beginTransaction()</div><div class="line">                .add(R.id.fragment_container, f)</div><div class="line">                .commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：</p>
<font color="Green"><br>getSupportFragmentManager()<br><br>findFragmentById(R.id.fragment_container)<br><br>fm.beginTransaction()<br>            .add(R.id.fragment_container, f)<br>            .commit();<br></font>

<font color="Blue"><br>Activity销毁时，FragmentManager会将fragment队列保存下来。在Activity重建时，新的FragmentManager会获得保存的队列，并重建fragment队列，从而恢复原来的状态。<br></font>

<font color="Green"><br>onAttach()<br><br>onCreate()<br><br>onCreateView()<br><br>onActivityCreated()<br><br>- onStart()<br><br>- onResume()<br><br>- onPause()<br><br>- onStop()<br><br>onDestroyView()<br><br>onDestroy()<br><br>onDetach()<br></font>

<table>
<thead>
<tr>
<th>内置版</th>
<th>Support版</th>
</tr>
</thead>
<tbody>
<tr>
<td>Activity</td>
<td>FragmentActivity</td>
</tr>
<tr>
<td>android.app.Fragment</td>
<td>android.suport.v4.app.Fragment</td>
</tr>
<tr>
<td>getFragmentManager()</td>
<td>getSupportFragmentManager()</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fragment的生命周期方法是由托管activity调用的，而activity的生命周期方法由操作系统调用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;fon
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>06. Android SDK Versions and Compatibility</title>
    <link href="http://yoursite.com/2016/09/18/06-Android-SDK-Versions-and-Compatibility/"/>
    <id>http://yoursite.com/2016/09/18/06-Android-SDK-Versions-and-Compatibility/</id>
    <published>2016-09-18T11:37:39.000Z</published>
    <updated>2016-09-18T12:24:53.000Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>版本</th>
<th>代号</th>
<th>API Level</th>
</tr>
</thead>
<tbody>
<tr>
<td>4.1</td>
<td>Jelly Bean</td>
<td>16</td>
</tr>
<tr>
<td>4.2</td>
<td>Jelly Bean</td>
<td>17</td>
</tr>
<tr>
<td>4.3</td>
<td>Jelly Bean</td>
<td>18</td>
</tr>
<tr>
<td>4.4</td>
<td>KitKat</td>
<td>19</td>
</tr>
<tr>
<td>5.0</td>
<td>Lollipop</td>
<td>21</td>
</tr>
<tr>
<td>5.1</td>
<td>Lollipop</td>
<td>22</td>
</tr>
<tr>
<td>6.0</td>
<td>Marshmallow</td>
<td>23</td>
</tr>
<tr>
<td>7.0</td>
<td>Nougat</td>
<td>24</td>
</tr>
</tbody>
</table>
<font color="Green"><br>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {<br><br>}<br></font>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;代号&lt;/th&gt;
&lt;th&gt;API Level&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;td&gt;Jelly Bean&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/t
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>05. Your Second Activity</title>
    <link href="http://yoursite.com/2016/09/18/05-Your-Second-Activity/"/>
    <id>http://yoursite.com/2016/09/18/05-Your-Second-Activity/</id>
    <published>2016-09-18T06:55:17.000Z</published>
    <updated>2016-09-18T11:31:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>tools:text这个属性在preview中显示，运行时不会显示出来</p>
<font color="Green"><br><br>public Intent(Context packageContext, Class&lt;?&gt; cls)<br><br>public Intent putExtra(…)<br><br>public void startActivityForResult(Intent intent, int requestCode)<br><br>getIntent().getBooleanExtra(…);<br></font>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent();</div><div class="line">   intent.putExtra(Extra_Cheated, true);</div><div class="line">   setResult(Activity.RESULT_OK, intent);</div></pre></td></tr></table></figure>
<font color="Green"><br>protected void onActivityResult(int requestCode, int resultCode, Intent data)<br></font>

<p>非常有趣的一点，在旋转后，CheatActivity被重新生成，然后其onCreate()函数中 <code>getIntent().getBooleanExtra(Extra_Answer, false);</code> 依然可以获得从QuizActivity传过来的参数。</p>
<font color="Blue"><br>在Activity中调用Activity.finish()方法同样可以将Activity从ActivityManager管理的栈中弹出。<br></font>

<p>注意key值多用 private static String，以及由此产生的生成Intent，取得Result Intent相应函数所处的Activity</p>
<p>#传入时：</p>
<p>在QuizActivity中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private static int REQUEST_CHEAT_ACTIVITY = 0;</div><div class="line"></div><div class="line">Intent intent = CheatActivity.newIntent(QuizActivity.this, quizArray[mCurQuestionIndex].getmTrueFalseAnswer());</div><div class="line">startActivityForResult(intent, REQUEST_CHEAT_ACTIVITY);</div></pre></td></tr></table></figure>
<p>在CheatActivity中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private static final String Extra_Answer = &quot;cheat_activity_extra_answer&quot;;</div><div class="line"></div><div class="line">public static Intent newIntent(Context context, boolean answer) &#123;</div><div class="line">    Intent intent = new Intent(context, CheatActivity.class);</div><div class="line">    intent.putExtra(Extra_Answer, answer);</div><div class="line">    return intent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#传出时：（返回值）<br>在QuizActivity中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private static int REQUEST_CHEAT_ACTIVITY = 0;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">    super.onActivityResult(requestCode, resultCode, data);</div><div class="line">    if (resultCode != Activity.RESULT_OK) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    if (requestCode == REQUEST_CHEAT_ACTIVITY) &#123;</div><div class="line">        if (data == null) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        mCheated = CheatActivity.hasCheated(data);</div><div class="line">        cheatArray[mCurQuestionIndex] = mCheated;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里再次把获取boolean类型的intent extra的任务放到了 <code>CheatActivity.hasCheated(data)</code> 中，传入intent，返回boolean</p>
<p>在CheatActivity中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">private static final String Extra_Cheated = &quot;cheat_activity_extra_cheated&quot;;</div><div class="line"></div><div class="line">public static boolean hasCheated(Intent intent) &#123;</div><div class="line">    return intent.getBooleanExtra(Extra_Cheated, false);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private static final String Extra_Cheated = &quot;cheat_activity_extra_cheated&quot;;</div><div class="line"></div><div class="line">&#123;</div><div class="line">        Intent intent = new Intent();</div><div class="line">        intent.putExtra(Extra_Cheated, true);</div><div class="line">        setResult(Activity.RESULT_OK, intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><font color="Red"><br>用Intent传来传去，需要用到putExtra，是key-value的</font></p>
<p>Activity在旋转时重新生成，需要Bundle的putXXXXX，也是key-value的</p>
<p>生成了好多key，取名字是个问题</p>
<ul>
<li>有没有更好的方法</li>
<li>key的命名应该遵循某种统一的规则<br></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tools:text这个属性在preview中显示，运行时不会显示出来&lt;/p&gt;
&lt;font color=&quot;Green&quot;&gt;&lt;br&gt;&lt;br&gt;public Intent(Context packageContext, Class&amp;lt;?&amp;gt; cls)&lt;br&gt;&lt;br&gt;publ
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>04. Debugging Android Apps</title>
    <link href="http://yoursite.com/2016/09/18/04-Debugging-Android-Apps/"/>
    <id>http://yoursite.com/2016/09/18/04-Debugging-Android-Apps/</id>
    <published>2016-09-18T02:20:39.000Z</published>
    <updated>2016-09-18T03:59:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Run -&gt; View Breakpoints</p>
<p>Android Lint : Analyze -&gt; Inspect Code</p>
<font color="Red"><br>怎么用好Lint？现在报的好多错误看不懂啊 ~<br></font>

<p>Tools -&gt; Android -&gt; Sync Project with Gradle</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Run -&amp;gt; View Breakpoints&lt;/p&gt;
&lt;p&gt;Android Lint : Analyze -&amp;gt; Inspect Code&lt;/p&gt;
&lt;font color=&quot;Red&quot;&gt;&lt;br&gt;怎么用好Lint？现在报的好多错误看不懂啊 ~&lt;br&gt;&lt;/font&gt;

    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
</feed>
